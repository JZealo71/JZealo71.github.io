<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>EVE-NG设置多个网卡</title>
      <link href="/2024/09/19/EVE-NG%E8%AE%BE%E7%BD%AE%E5%A4%9A%E4%B8%AA%E7%BD%91%E5%8D%A1/"/>
      <url>/2024/09/19/EVE-NG%E8%AE%BE%E7%BD%AE%E5%A4%9A%E4%B8%AA%E7%BD%91%E5%8D%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="EVE-NG设置多个网卡"><a href="#EVE-NG设置多个网卡" class="headerlink" title="EVE-NG设置多个网卡"></a>EVE-NG设置多个网卡</h3><p>本文借鉴<code>傍晚的烟火</code>博主的一篇文章<a href="https://blog.csdn.net/wjmasd/article/details/125582976">EVE-NG 连接物理网络</a>的科普，在此非常感谢！！！</p><p>目标：本文给EVE-NG虚拟机配置三个网卡：NAT、仅主机和桥接三种方式的网络</p><h4 id="一、添加桥接网络"><a href="#一、添加桥接网络" class="headerlink" title="一、添加桥接网络"></a>一、添加桥接网络</h4><p>Vmware默认有两种网络模式：仅主机（vmnet1）和NAT模式（vmnet8），如果想添加一个桥接模式，需要设置桥接的网卡。依次点开Vmware左上角的<code>编辑--&gt;虚拟网络编辑器--&gt;更改设置</code>（右下角）–&gt;选择桥接网卡</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191901711.png" alt="image-20240919190135651"></p><h4 id="二、添加虚拟机网卡"><a href="#二、添加虚拟机网卡" class="headerlink" title="二、添加虚拟机网卡"></a>二、添加虚拟机网卡</h4><p>选中要设置的虚拟机，点击上面菜单栏的<code>虚拟机--&gt;设置</code></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191903551.png" alt="image-20240919190300487"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191904441.png" alt="image-20240919190436377"></p><h4 id="三、更改pnet模式"><a href="#三、更改pnet模式" class="headerlink" title="三、更改pnet模式"></a>三、更改pnet模式</h4><p>进入ubuntu系统更改IP信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/network/interfaces<span class="comment"># ubuntu16和20版本的网络接口配置路径</span></span><br></pre></td></tr></table></figure><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191912513.png" alt="image-20240919191240435"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191921396.png" alt="image-20240919192111349"></p><h4 id="四、设置DNS"><a href="#四、设置DNS" class="headerlink" title="四、设置DNS"></a>四、设置DNS</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------</span><br><span class="line"><span class="comment"># Ubuntu16:</span></span><br><span class="line">vi /etc/resolvconf/resolv.conf.d/base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加几个DNS服务器IP</span></span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后重启网络服务器并设置开机自启</span></span><br><span class="line">systemctl restart networking</span><br><span class="line">systemctl <span class="built_in">enable</span> networking</span><br><span class="line">-----------------------------------------------------</span><br><span class="line"><span class="comment"># Ubuntu20:</span></span><br><span class="line">vi /etc/systemd/resolved.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加几个DNS服务器IP</span></span><br><span class="line">NDS=114.114.114.114 8.8.8.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后重启网络服务器并设置开机自启</span></span><br><span class="line">systemctl restart networking</span><br><span class="line">systemctl <span class="built_in">enable</span> networking</span><br><span class="line">------------------------------------------------------</span><br></pre></td></tr></table></figure><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191925370.png" alt="image-20240919192514304"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191925469.png" alt="image-20240919192547441"></p><h4 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看三块网卡是否获取到相应的ip</span></span><br><span class="line">ifconfig<span class="comment"># 最小化安装没有该指令的话使用ip address也可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别ping物理机ip和百度服务器</span></span><br><span class="line">ping 192.168.3.2</span><br><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191929759.png" alt="image-20240919192944689"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191918598.png" alt="image-20240919173856266"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> EVE </tag>
            
            <tag> 虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EVE-NG设置桥接网络</title>
      <link href="/2024/09/19/EVE-NG%E8%AE%BE%E7%BD%AE%E6%A1%A5%E6%8E%A5%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/09/19/EVE-NG%E8%AE%BE%E7%BD%AE%E6%A1%A5%E6%8E%A5%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="EVE-NG设置桥接网络"><a href="#EVE-NG设置桥接网络" class="headerlink" title="EVE-NG设置桥接网络"></a>EVE-NG设置桥接网络</h3><h4 id="一、查看主机网卡和网段"><a href="#一、查看主机网卡和网段" class="headerlink" title="一、查看主机网卡和网段"></a>一、查看主机网卡和网段</h4><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191707721.png" alt="image-20240919170727673"><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191713567.png" alt="image-20240919171350526"></p><h4 id="二、编辑虚拟机网络"><a href="#二、编辑虚拟机网络" class="headerlink" title="二、编辑虚拟机网络"></a>二、编辑虚拟机网络</h4><p>依次点开vmware左上角的<code>编辑--&gt;虚拟网络编辑器--&gt;更改设置</code>（右下角）–&gt;选择桥接网卡</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191729632.png" alt="image-20240919172933586"></p><h4 id="三、设置虚拟机网卡"><a href="#三、设置虚拟机网卡" class="headerlink" title="三、设置虚拟机网卡"></a>三、设置虚拟机网卡</h4><p>选中要设置的虚拟机，点击上面菜单栏的<code>虚拟机--&gt;设置--&gt;网络适配器</code>，选择第一个桥接并确定</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191733972.png" alt="image-20240919173308917"></p><h4 id="四、进入ubuntu系统更改IP信息"><a href="#四、进入ubuntu系统更改IP信息" class="headerlink" title="四、进入ubuntu系统更改IP信息"></a>四、进入ubuntu系统更改IP信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/network/interfaces//ubuntu16版本的网络接口配置路径</span><br></pre></td></tr></table></figure><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191711483.png" alt="image-20240919171153416"></p><h4 id="五、设置DNS"><a href="#五、设置DNS" class="headerlink" title="五、设置DNS"></a>五、设置DNS</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/resolvconf/resolv.conf.d/base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加几个DNS服务器IP</span></span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后重启网络服务器</span></span><br><span class="line">systemctl restart networking</span><br></pre></td></tr></table></figure><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191735766.png" alt="image-20240919173518736"></p><h4 id="六、测试"><a href="#六、测试" class="headerlink" title="六、测试"></a>六、测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分别ping物理机ip和百度服务器</span></span><br><span class="line">ping 192.168.3.2</span><br><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191738312.png" alt="image-20240919173856266"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> EVE </tag>
            
            <tag> 虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora不能加载图片</title>
      <link href="/2024/09/19/Typora%E4%B8%8D%E8%83%BD%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87/"/>
      <url>/2024/09/19/Typora%E4%B8%8D%E8%83%BD%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="Typora不能加载图片"><a href="#Typora不能加载图片" class="headerlink" title="Typora不能加载图片"></a>Typora不能加载图片</h2><h4 id="一、问题描述："><a href="#一、问题描述：" class="headerlink" title="一、问题描述："></a>一、问题描述：</h4><p>用的<code>Windows10 + typora-0.9.93 + Picgo + 阿里云的OSS</code>，上传图片成功，Picgo和阿里云图床都显示正常，就是typora文档加载不出来图片</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191630597.png" alt="image-20240919161056497"></p><h4 id="二、解决过程："><a href="#二、解决过程：" class="headerlink" title="二、解决过程："></a>二、解决过程：</h4><p>自己把网上的方法都试了，全都没用，无奈求助我的大佬同学，他让我用其他md软件测试一下，给我推荐了一款markdown编辑器<a href="markdownpad.com">软件</a>，我安装的免费版，安装的过程中额外安装了一个VC++2010，新软件安装后没法正常使用，<strong>但是再次打开typora却神奇的发现可以正常加载图片了！！！！</strong></p><h4 id="三、总结："><a href="#三、总结：" class="headerlink" title="三、总结："></a>三、总结：</h4><ol><li><p>最基本的原因是网络是否有问题，图床是否有问题，路径是否有问题，我的显然都不属于这几种</p></li><li><p>网上有的说图片太大不会正常加载，改小就可以了。但是很多评论说不是这个原因，我的也不是这个原因</p></li><li><p>我重装了Typora，也是没用</p></li><li><p>在我安装另一个md软件的过程中，额外安装了一个VC++2010后，再次打开Typora，成功了。虽然我也不清楚是不是这个原因</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202409191630547.png" alt="image-20240919161017218"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EVE-NG的安装与使用</title>
      <link href="/2024/09/19/eve-ng%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/09/19/eve-ng%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、eve-ng的安装"><a href="#一、eve-ng的安装" class="headerlink" title="一、eve-ng的安装"></a>一、eve-ng的安装</h3><h4 id="1-EVE-NG简介"><a href="#1-EVE-NG简介" class="headerlink" title="1. EVE-NG简介"></a>1. EVE-NG简介</h4><p>EVE-NG（Emulated Virtual Environment - Next Generation），直译为“下一代仿真虚拟环境”，原名是UnifiedNetworking Lab统一网络实验室，支持各大厂商（如华为、华三、思科等）的设备镜像，并且这款模拟器已经不仅可以模拟网络设备，也可以运行一切虚拟机。理论上，只要能将虚拟机的虚拟磁盘格式转换为qcow2都可以在EVE-NG上运行。所以EVE-NG可以算得上是仿真虚拟环境</p><h4 id="2-安装vmware"><a href="#2-安装vmware" class="headerlink" title="2. 安装vmware"></a>2. 安装vmware</h4><p>EVE-NG可以看成一个ubuntu虚拟机，因此安装及运行eve-ng的方式，与安装运行一台ubuntu相似，需要先安装vmware虚拟机软件</p><p><a href="https://www.vmware.com/products/desktop-hypervisor/workstation-and-fusion">vmware官网</a></p><h4 id="3-下载EVE-NG（社区版）"><a href="#3-下载EVE-NG（社区版）" class="headerlink" title="3. 下载EVE-NG（社区版）"></a>3. 下载EVE-NG（社区版）</h4><p><a href="https://www.eve-ng.net/index.php/download/">eve-ng官网</a></p><p><a href="https://eve-ng.cn/doku.php?id=%E9%A6%96%E9%A1%B5">中文网</a></p><h4 id="4-导入EVE-NG镜像"><a href="#4-导入EVE-NG镜像" class="headerlink" title="4. 导入EVE-NG镜像"></a>4. 导入EVE-NG镜像</h4><p>如果下载的是ova格式的文件，直接导入到vmware中即可，如果是iso文件，则按照安装ubuntu虚拟机的方式安装即可</p><p><strong>注：官网称内存至少8G，为了运行流畅，尽可能给较多的硬件资源</strong></p><h3 id="二、使用EVE-NG"><a href="#二、使用EVE-NG" class="headerlink" title="二、使用EVE-NG"></a>二、使用EVE-NG</h3><h4 id="1-启动EVE-NG后台"><a href="#1-启动EVE-NG后台" class="headerlink" title="1. 启动EVE-NG后台"></a>1. 启动EVE-NG后台</h4><p>运行eve-ng虚拟机后，默认的后台账号为root，密码为eve</p><p><strong>注：首次登录需要配置，默认配置即可</strong></p><h4 id="2-浏览器登录"><a href="#2-浏览器登录" class="headerlink" title="2. 浏览器登录"></a>2. 浏览器登录</h4><p>后台会给出一个登录ip，在浏览器中访问该ip即可（<strong>账号：admin，密码：eve</strong>）</p><p><strong>注：官方推荐使用火狐和谷歌</strong></p><h3 id="三、-常用镜像导入"><a href="#三、-常用镜像导入" class="headerlink" title="三、 常用镜像导入"></a>三、 常用镜像导入</h3><p><a href="https://blog.csdn.net/liuhuayeyu/article/details/124082469">参考博客-看星星的小王子</a></p><h4 id="1-EVE-NG模拟器支持的镜像类型简介"><a href="#1-EVE-NG模拟器支持的镜像类型简介" class="headerlink" title="1. EVE-NG模拟器支持的镜像类型简介"></a>1. EVE-NG<a href="https://so.csdn.net/so/search?q=%E6%A8%A1%E6%8B%9F%E5%99%A8&spm=1001.2101.3001.7020">模拟器</a>支持的镜像类型简介</h4><p> EVE-NG支持目前市面上的绝大多数镜像类型(<strong>主要三种：Dynamips、IOL&#x2F;IOU以及QEMU</strong>)</p><ol><li><h5 id="Dynamips类型镜像"><a href="#Dynamips类型镜像" class="headerlink" title="Dynamips类型镜像"></a><strong>Dynamips类型镜像</strong></h5><p>Dynamips是由法国UTC大学的Christophe Fillot于2005年发布的一款基于虚拟化技术的模拟器，主要用于在普通PC上模拟Cisco的路由器，它可以运行标准的IOS镜像，目前已经可以支持1700、2600、3700、7200等系列的路由器，但支持的IOS版本相对较老（12.X），很多新的命令敲不了，<strong>使用体验不太好，能不用就不用</strong></p></li><li><h5 id="IOL-x2F-IOU类型镜像"><a href="#IOL-x2F-IOU类型镜像" class="headerlink" title="IOL&#x2F;IOU类型镜像"></a><strong>IOL&#x2F;IOU类型镜像</strong></h5><p>IOL为IOS on Linux（也叫IOU，IOS on Unix）的简写，可以运行在基于x86平台的任意Linux发行版系统中，IOL支持较新版本的IOS（为15.X的新版本IOS），基本完全支持思科设备的2、3层功能，可以用来模拟基于新版本IOS的思科二层交换机、三层交换机和路由器，相比传统的Dynamips模拟器有占用资源更少，启动快等优点，<strong>一般在可以使用IOL的条件下，最好使用IOL代替Dynamips镜像进行组网实验</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">i86bi_linux_l2-adventerprisek9-ms.SSA.high_iron_20190423.bin(二层)</span><br><span class="line">   </span><br><span class="line">i86bi_LinuxL3-AdvEnterpriseK9-M2_157_3_May_2018.bin(三层)</span><br><span class="line">   </span><br><span class="line">L3-ADVENTERPRISEK9-M-15.4-2T.bin(三层)</span><br></pre></td></tr></table></figure></li><li><h5 id="Qemu类型镜像"><a href="#Qemu类型镜像" class="headerlink" title="Qemu类型镜像"></a><strong>Qemu类型镜像</strong></h5><p>Qemu是一套由法布里斯·贝拉(Fabrice Bellard)所编写的以GPL许可证分发源码的模拟处理器，Qemu可以帮助EVE-NG运行更多基于KVM的虚拟设备，越来越多的设备商开始开发并释放出适配KVM环境的系统，绝大多数网络设备（交换机、防火墙、路由器、负载均衡等）的操作系统和Linux系统、Windows系统等都可以制作出相应的Qemu镜像，<strong>在EVE-NG上进行使用，通常Qemu镜像的后缀名为qcow2，该文件本质是一个操作系统的虚拟硬盘文件</strong></p><p>EVE-NG模拟器支持的 QEMU镜像：所有QEMU格式封装的镜像，Cisco、Juniper、Huawei、PaloAlto、Aruba、F5、Radware、Windows、Linux、VMware、Citrix等常见的操作系统都有覆盖，此外还支持自定制的QEMU镜像</p></li></ol><h4 id="2-常用镜像文件的导入和使用"><a href="#2-常用镜像文件的导入和使用" class="headerlink" title="2. 常用镜像文件的导入和使用"></a>2. 常用镜像文件的导入和使用</h4><p>使用的镜像文件如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dynamips测试镜像：</span></span><br><span class="line">c1710-bk9no3r2sy-mz.124-23.bin(思科c1700系列路由器镜像)</span><br><span class="line">c3725-adventerprisek9-mz.124-15.T14.bin(思科c3725系列路由器镜像)</span><br><span class="line">c7200-adventerprisek9-mz.152-4.M7.bin(思科c7200系列路由器镜像)</span><br><span class="line"></span><br><span class="line"><span class="comment"># IOL/IOU测试镜像：</span></span><br><span class="line">i86bi-linux-l2-adventerprisek9-15.2d(思科IOS 15.x版本二层镜像)</span><br><span class="line">i86bi-linux-l3-adventerprisek9-15.4.2T.bin(思科IOS 15.X版本三层镜像)</span><br><span class="line">L3-ADVENTERPRISEK9-M-15.4-2T.bin(思科IOS 15.X版本三层镜像)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Qemu测试镜像：</span></span><br><span class="line">asav-941-200.qcow2(思科ASA防火墙镜像)</span><br><span class="line">vsrx-vmdisk-15.1X49-D150.2.qcow2(Juniper SRX系列防火墙镜像)</span><br><span class="line">centos7.1.qcow2(centos系统镜像)</span><br><span class="line">windows7.qcow2(win7系统镜像)</span><br></pre></td></tr></table></figure><p><a href="https://pan.baidu.com/s/15dqPTgoo93zpNvTDAYXefQ">镜像链接</a>，提取码：u2y4</p><ol><li><p>Dynamips镜像导入</p><p>（1）<strong>改后缀名：</strong>Dynamips镜像文件是二进制类型，默认后缀的 <strong>.bin</strong>，而EVE-NG下可识别的Dynamips镜像后缀为 <strong>.image</strong>，所以这里将其后缀均改为 .image(文件内容不会发生变化)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">c1710-bk9no3r2sy-mz.124-23.bin--&gt;c1710-bk9no3r2sy-mz.124-23.iamge</span><br><span class="line">c3725-adventerprisek9-mz.124-15.T14.bin--&gt;c3725-adventerprisek9-mz.124-15.T14.iamge</span><br><span class="line">c7200-adventerprisek9-mz.152-4.M7.bin--&gt;c7200-adventerprisek9-mz.152-4.M7.iamge</span><br></pre></td></tr></table></figure><p>（2）<strong>传输文件：</strong>使用文件传输软件（本操作使用MobaXterm，xftp、secureCRT等等不限）将准备好的三个镜像文件传到eve-ng服务器中的<code>/opt/unetlab/addons/dynamips/</code>目录下</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407251755318.png" alt="image-20240725175526282"></p><p>（3）<strong>授权：</strong>导入镜像文件后，还需要授予EVE-NG系统读取这些镜像的权限，以便对这些镜像进行正常操作和管理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@eve-ng:~<span class="comment"># /opt/unetlab/wrappers/unl_wrapper -a fixpermissions</span></span><br><span class="line"><span class="comment"># 这条命令执行完毕后没有输出，等待其执行完毕即可)即可完成授权操作</span></span><br></pre></td></tr></table></figure><p>（4）<strong>计算镜像文件的IDLE值（可选）</strong></p><p>Dynamips要在x86平台下模拟思科的CPU，运行时需要将虚拟的CPU指令翻译成可在x86下执行的指令，而idle值用来记录虚拟CPU何时不工作，这样就可以在它空闲时停止翻译，从而可以降低模拟器的CPU占用率，<strong>如果没有计算idle值，运行模拟器时CPU占用率会很高</strong></p><p>现在很多流传的Dynamips镜像是已经计算好最优idle值的，加载镜像时会自动填入计算好的idle值，就不需要自己去计算了，我这里的镜像也是已经计算好idle值的，不过这里还是演示一下EVE-NG系统中计算Dynamips镜像idle值的方法，感兴趣的可以了解，如果没兴趣就可以直接跳过</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行如下指令：</span></span><br><span class="line">dynamips -P &lt;platform&gt; [-t &lt;model&gt;] /opt/unetlab/addons/dynamips/镜像文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 含义：</span></span><br><span class="line">其中-P用来指定大的版本号，如1700,3725或7200，-t用来指定具体的型号，如1710,3725,7206等，也可以只指定大版本号，不指定具体的型号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例：</span></span><br><span class="line">dynamips -P 3725 /opt/unetlab/addons/dynamips/c3725-adventerprisek9-mz.124-15.T14.image</span><br></pre></td></tr></table></figure><p>加载过程中任意时刻，先按下ctrl ]，松手后迅速按下 i 键就会开始计算idle值，这时会显示Please wait while gathering statistics，稍等几秒后，在后续信息中会给出提示信息Suggested idling PC，后边即为计算出的多个建议idle值，每一行数值中间的f不算，前边的0x加后边8开始的数字组成了idle值，如为0x8000b1dc，挑选idle值最大的作为最优idle值，编辑<code>/opt/unetlab/html/templates/amd（或者intel）/c3725.yml（实际哪个设备就进入到哪个yml文件中）</code>，将里面的idlepc的值换成最佳值即可</p><p>（5）<strong>镜像测试</strong></p><p>完成Dynamips镜像导入后，就可以在EVE-NG Lab平台进行使用了，浏览器中打开 EVE-NG Web界面，新建一个实验拓扑，右键新增节点，在模板列表中可以看到Cisco 1710、3725和7206三个模板已经变成了蓝色，表示对应模板下已经有可用的镜像文件</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407251824621.png" alt="image-20240725182429556"></p></li><li><p>IOL&#x2F;IOU镜像导入与使用</p><p>（1）<strong>准备镜像</strong>：首先准备好EVE-NG支持的IOL&#x2F;IOU镜像文件如下（网上流传的版本有很多，命名也不太一样，名字或小版本有区别不影响的），后缀名通常为.bin，不需要进行修改，此外运行IOL还需要一个以iourc为名的license文件，iourc的lic中有一段license序列号，这段序列号会随着EVE-NG的hostname变动，hostname不同，计算出的结果也不同，这里借助一个python脚本CiscoIOUKeygen.py 来根据当前环境重新生成license文件中的序列号信息，使IOL&#x2F;IOU镜像文件可以在EVE-NG平台上正常使用，iourc文件也可以在系统中自行创建，只是一个普通的文本文件，只要填入对应的序列号信息即可</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407281603896.png" alt="image-20240728160313807"></p><p>（2）<strong>上传镜像</strong>：将下载好的文件上传到eve-ngf服务器对应路径：<code>/opt/unetlab/iol/bin/</code>，方法同前</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407281608063.png" alt="image-20240728160839017"></p><p>（3）<strong>计算IOL镜像序列号</strong>：在<code>/opt/unetlab/iol/bin/</code>路径下运行<code>python3 CiscolIOUKeygen.py</code>指令生成license，并将license值写入到iourc文件中，如下图所示</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407281615277.png" alt="image-20240728161522220"></p><p>（4）<strong>授权</strong>：授予EVE-NG系统读取这些镜像的权限，以便对这些镜像进行正常操作和管理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@eve-ng:~<span class="comment"># /opt/unetlab/wrappers/unl_wrapper -a fixpermissions</span></span><br><span class="line"><span class="comment"># 这条命令执行完毕后没有输出，等待其执行完毕即可)即可完成授权操作</span></span><br></pre></td></tr></table></figure><p>（5）<strong>测试镜像</strong>：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407281618556.png" alt="image-20240728161850493"></p></li><li><p>Qenu镜像导入与使用</p><p>（1）<strong>准备镜像文件</strong>：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407290933026.png" alt="image-20240729093312979"></p><p>（2）<strong>导入镜像</strong>：需要先给上传好的镜像文件重新命名，EVE-NG对Qemu镜像文件的目录和文件名有<strong>严格要求</strong>，每个导入 <code>/opt/unetlab/addons/qemu/ </code>目录下的qemu镜像必须放在一个父目录下，其父目录名称和镜像名称都要按照官方给定的规则进行命名，如果不符合规则会导致对应镜像无法与相应的模板匹配，从而无法被EVE-NG识别</p><p>可以<a href="http://https/www.eve-ng.net/index.php/documentation/qemu-image-namings/">从官网进行查询</a>到其支持的所有QEMU镜像的命名规范，不同镜像系统的命名格式不一样</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407291012583.png" alt="image-20240729101258534"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407291014247.png" alt="image-20240729101414205"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407291014690.png" alt="image-20240729101457642"></p><p>官方给定的表格中第一列指定该类型镜像的父目录的前半部分名称（一般为镜像类型名称的一部分简写加-，后半部分用户可以自定义，一般加对应镜像的版本号），第二列为镜像类型或厂商，第三列指定该类型镜像文件的文件名（不包含后缀.qcow）</p><p>根据上述规范，我们需要为 <code>/opt/unetlab/addons/qemu/</code> 目录下上传的每个镜像文件做三步操作：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建一个父目录，名称格式为：EVE为该镜像类型预定义的模板名-XXX</span><br><span class="line">将镜像文件移动到其父目录下       </span><br><span class="line">将镜像文件重命名，名称格式为：EVE为该镜像类型预定义的镜像名.qcow2</span><br></pre></td></tr></table></figure><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407291030047.png" alt="image-20240729103042988"></p><p>（3）<strong>授权</strong>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@eve-ng:/opt/unetlab/addons/qemu<span class="comment"># /opt/unetlab/wrappers/unl_wrapper -a fixpermissions</span></span><br></pre></td></tr></table></figure><p>（4）<strong>镜像测试</strong>：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407291033738.png" alt="image-20240729103308688"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407291033368.png" alt="image-20240729103352321"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202407291034090.png" alt="image-20240729103427032"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> EVE </tag>
            
            <tag> 虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7最小系统安装chkrootkit常见问题</title>
      <link href="/2024/02/15/CentOS7%E6%9C%80%E5%B0%8F%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85chkrootkit%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2024/02/15/CentOS7%E6%9C%80%E5%B0%8F%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85chkrootkit%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="CentOS7最小系统安装chkrootkit常见问题"><a href="#CentOS7最小系统安装chkrootkit常见问题" class="headerlink" title="CentOS7最小系统安装chkrootkit常见问题"></a>CentOS7最小系统安装chkrootkit常见问题</h3><h5 id="问题一：CentOS7最小安装没有安装ifconfig、vim、wget等常用指令，没有开启网卡，需要先开启网卡，然后安装必要的文件"><a href="#问题一：CentOS7最小安装没有安装ifconfig、vim、wget等常用指令，没有开启网卡，需要先开启网卡，然后安装必要的文件" class="headerlink" title="问题一：CentOS7最小安装没有安装ifconfig、vim、wget等常用指令，没有开启网卡，需要先开启网卡，然后安装必要的文件"></a>问题一：CentOS7最小安装没有安装ifconfig、vim、wget等常用指令，没有开启网卡，需要先开启网卡，然后安装必要的文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. vi /etc/sysconfig/network-scripts/ifcfg-ens33<span class="comment"># vim指令没有安装，暂时不能使用</span></span><br><span class="line">2. 将onboot no 改成 onboot <span class="built_in">yes</span>，保存退出</span><br><span class="line">3. 重启网络：systemctl restart network</span><br></pre></td></tr></table></figure><ol><li><p>准备gcc编译环境</p><p>对于CentOS系统，需要安装gcc编译环境，执行下述三个命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># yum -y install gcc</span></span><br><span class="line">[root@server ~]<span class="comment"># yum -y install gcc-c++//不能输入g++，提示没有可用的包</span></span><br><span class="line">[root@server ~]<span class="comment"># yum -y install make</span></span><br></pre></td></tr></table></figure></li><li><p>安装chkrootkit</p><p>为了安全起见，<strong>建议直接从官方网站下载chkrootkit源码</strong>，然后进行安装，操作如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># tar zxvf chkrootkit.tar.gz</span></span><br><span class="line">[root@server ~]<span class="comment"># cd chkrootkit-*</span></span><br><span class="line">[root@server ~]<span class="comment"># make sense</span></span><br><span class="line"><span class="comment"># 注意，上面的编译命令为make sense</span></span><br><span class="line">[root@server ~]<span class="comment"># cd ..</span></span><br><span class="line">[root@server ~]<span class="comment"># cp -r chkrootkit-* /usr/local/chkrootkit</span></span><br><span class="line">[root@server ~]<span class="comment"># rm -rf chkrootkit-*</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="问题二：使用编译指令make-sense时，报错"><a href="#问题二：使用编译指令make-sense时，报错" class="headerlink" title="问题二：使用编译指令make sense时，报错"></a>问题二：使用编译指令make sense时，报错</h5><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202402151256087.png" alt="image-20240215125634961"></p><p><strong>原因：在新版本的linux 系统下安装 glibc-devel、glibc和gcc-c++时，都不会安装libc.a. <a href="http://只安装libc.so/">只安装libc.so</a>. 所以当使用-static时，libc.a不能使用，只能报找不到libc了</strong></p><p><strong>解决：安装glibc-static</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install glibc-static</span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用chkrootkit</p><p>安装完的chkrootkit程序位于&#x2F;usr&#x2F;local&#x2F;chkrootkit目录下，执行如下命令即可显示chkrootkit的详细用法：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202402151314925.png" alt="image-20240215131433872"></p><p>chkrootkit的使用比较简单，直接执行chkrootkit命令即可自动开始检测系统。下面是某个系统的检测结果：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202402151317628.png" alt="image-20240215131736586"></p><p>检测结果较多，可以使用more进行分页显示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/chkrootkit/chkrootkit | more</span><br></pre></td></tr></table></figure></li><li><p>chkrootkit的缺点</p><p>chkrootkit在检查rootkit的过程中使用了部分系统命令，因此，如果服务器被黑客入侵，那么依赖的系统命令可能也已经被入侵者替换，此时chkrootkit的检测结果将变得完全不可信。为了避免chkrootkit的这个问题，可以在服务器对外开放前，事先将chkrootkit使用的系统命令进行备份，<strong>在需要的时候使用备份的原始系统命令让chkrootkit对rootkit进行检测</strong>。这个过程可以通过下面的操作实现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># mkdir /usr/share/.commands</span></span><br><span class="line">[root@server ~]<span class="comment"># cp `which --skip-alias awk cut echo find egrep id head ls netstat ps</span></span><br><span class="line">strings sed <span class="built_in">uname</span>` /usr/share/.commands</span><br><span class="line">[root@server ~]<span class="comment"># /usr/local/chkrootkit/chkrootkit -p /usr/share/.commands///指定命令的路径</span></span><br><span class="line">[root@server share]<span class="comment"># cd /usr/share/</span></span><br><span class="line">[root@server share]<span class="comment"># tar zcvf commands.tar.gz .commands</span></span><br><span class="line">[root@server share]<span class="comment"># rm -rf commands.tar.gz</span></span><br></pre></td></tr></table></figure><p>上面这段操作是在&#x2F;usr&#x2F;share&#x2F;下建立了一个.commands隐藏文件，然后将chkrootkit使用的系统命令进行备份到这个目录下。为了安全起见，可以将.commands目录压缩打包，然后下载到一个安全的地方进行备份，以后如果服务器遭受入侵，就可以将这个备份上传到服务器任意路径下，然后通过chkrootkit命令的“-p”参数指定这个路径进行检测即可</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> 安全 </tag>
            
            <tag> chkrootkit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bWAPP安装与通关</title>
      <link href="/2022/09/24/bWAPP%E5%AE%89%E8%A3%85%E4%B8%8E%E9%80%9A%E5%85%B3/"/>
      <url>/2022/09/24/bWAPP%E5%AE%89%E8%A3%85%E4%B8%8E%E9%80%9A%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装bWAPP"><a href="#一、安装bWAPP" class="headerlink" title="一、安装bWAPP"></a>一、安装bWAPP</h3><h5 id="1-单独安装"><a href="#1-单独安装" class="headerlink" title="1.单独安装"></a>1.单独安装</h5><p>部署在Apache+PHP+Mysql环境下（以phpstudy为例）</p><ol><li><a href="https://sourceforge.net/projects/bwapp/files/latest/download">bWAPP下载</a></li><li>将文件解压后，放到phpstudy的WWW目录下（有两个bWAPP文件夹，外层的文件可以删掉，只留里面一层）</li><li>在admin&#x2F;settings.php文件中设置用户密码为root（mysql默认的，不改的话第4步安装不成功）</li><li>浏览器运行127.0.0.1&#x2F;bWAPP&#x2F;install.php</li><li>点击here链接安装bWAPP</li></ol><h5 id="2-虚拟机安装"><a href="#2-虚拟机安装" class="headerlink" title="2. 虚拟机安装"></a>2. 虚拟机安装</h5><p>虚拟机版本能够测试的漏洞更多，比如破壳漏洞，心脏滴血等在单独安装的环境下无法测试</p><ol><li><a href="https://sourceforge.net/projects/bwapp/files/bee-box/bee-box_v1.6.7z/download">下载压缩包</a></li><li>解压后使用VMWare打开bee-box.vmx即可</li><li>点击bWAPP Start即可进入登录界面，或者物理机访问：http:&#x2F;&#x2F;虚拟机IP地址&#x2F;bWAPP&#x2F;login.php</li></ol><h5 id="3-Docker安装"><a href="#3-Docker安装" class="headerlink" title="3. Docker安装"></a>3. Docker安装</h5><p>在hub.docker.com上搜索bwapp，使用<a href="https://hub.docker.com/r/raesene/bwapp">raesene&#x2F;bwapp</a>镜像即可</p><p>拉取镜像后，根据网站说明操作即可：运行docker指令：<code>docker run -d -p 80:80 raesene/bwapp</code></p><h5 id="所需有关bWAPP文件均可从itsecgames-com得到"><a href="#所需有关bWAPP文件均可从itsecgames-com得到" class="headerlink" title="所需有关bWAPP文件均可从itsecgames.com得到"></a>所需有关bWAPP文件均可从<a href="http://itsecgames.com/">itsecgames.com</a>得到</h5>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> bWAPP </tag>
            
            <tag> 软件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django基本操作（5）</title>
      <link href="/2022/09/11/Django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%885%EF%BC%89/"/>
      <url>/2022/09/11/Django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%885%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、静态文件配置"><a href="#一、静态文件配置" class="headerlink" title="一、静态文件配置"></a>一、静态文件配置</h3><p>在setings.py文件中配置以下两项（1和2）内容</p><ol><li><p>配置静态文件的访问路径（默认存在）</p><ul><li>通过那个url地址找静态文件</li><li>STATIC_URL &#x3D; ’&#x2F;static&#x2F;‘ （可变的)</li><li>说明：指定访问路径文件时需要通过&#x2F;static&#x2F;xxx或<code>http://127.0.0.1:8000/static/xxx</code>，其中xxx代表具体的静态资源位置</li></ul></li><li><p>配置静态文件的存储路径STATICFILES_DIRS（保存的是静态文件在服务器端的存储位置）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># file: setting.py</span></span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>),    <span class="comment"># 注意：“static&quot;可以更改，不过默认都是些static；逗号不能忘记，否则不是元组</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>案例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_static</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;test_static.html&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># test_static.html</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test static<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:8000/static/img/django.jpeg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/img/django.jpeg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;test_static&quot;</span>, views.test_static)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>模板中访问静态文件（常用）：通过<code>&#123;% static %&#125;</code>标签访问静态文件</p><ul><li><p>加载<code>static - &#123;% load static %&#125;</code></p></li><li><p>使用静态资源 -<code>&#123;% static '静态资源路径' %&#125;</code></p></li><li><p>样例：<code>&lt;img src = &quot;&#123;% static 'images/lena.jpg' %&#125;&quot;</code> （<strong>注意：images前面不加斜杠）</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># test_static.html</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test static<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;images/django.jpeg&#x27;%&#125;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="二、Django应用及分布式路由"><a href="#二、Django应用及分布式路由" class="headerlink" title="二、Django应用及分布式路由"></a>二、Django应用及分布式路由</h3><ol><li><p>应用定义：应用在Django项目中是一个独立的业务模块，可以包含自己的路由、视图、模板、模型</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202209111617541.png" alt="image-20220911161747407"></p></li><li><p>创建应用：</p><ol><li><p>创建文件夹：<code>python3 manage.py startapp music</code></p></li><li><p>在settings.py的INSTALLED_APPS中注册此应用:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>, <span class="comment"># 用户信息模块</span></span><br><span class="line">    <span class="string">&#x27;music&#x27;</span>, <span class="comment"># 音乐模块</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol></li><li><p>分布式路由：Django中，主路由配置文件（urls.py）可以不处理用户具体路由，主路由配置文件可以做请求的分发（分布式请求处理）。具体的请求可以有各自的应用来进行处理</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202209111630798.png" alt="image-20220911163000723"></p></li><li><p>配置分布式路由</p><ol><li><p>主路由中调用include函数</p><ul><li><p>语法：include(‘app名字.url模块名’)</p></li><li><p>作用：用于将当前路由转到个个应用的路由配置文件的urlpatterns进行分布式处理</p></li><li><p>以<code>http://127.0.0.1:8000/music.index</code>为例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlspatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;music/&#x27;</span>, include(<span class="string">&#x27;music.urls&#x27;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>应用下配置urls.py</p><ul><li><p>手动创建urls.py文件（内容结构同主路由完全一样）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/musix/index</span></span><br><span class="line">    path(<span class="string">&#x27;index&#x27;</span>, views.index_view)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>案例：略（总结：创建应用–&gt;注册应用–&gt;配置主路由–&gt;配置分路由–&gt;定义视图函数）</p></li><li><p>应用下的模板：（应用内部可以配置模板文件）</p><ol><li>应用下手动创建templates文件夹</li><li>settings.py中开启应用模板模块（TEMPLATES配置项中的APP_DIRS’值为True即可，默认值即为True）</li></ol></li><li><p>应用下templates和外层templates都存在时，django的查找模板规则：</p><ul><li>优先查找外层templates目录下的模板</li><li>外层模板查找后按照INSTALLED_APPS配置下的应用顺序（注册顺序）逐层查找</li><li>若想查找news应用下的templates中的index.html文件，可以在应用下创建一个同名文件夹news，将index.html放入该news文件夹中，然后将index_view函数中将路由修改为news&#x2F;index.html</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
            <tag> 静态文件 </tag>
            
            <tag> 应用 </tag>
            
            <tag> 分布式路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django基本操作（4）</title>
      <link href="/2022/09/08/Django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%884%EF%BC%89/"/>
      <url>/2022/09/08/Django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、URL在代码中的位置"><a href="#一、URL在代码中的位置" class="headerlink" title="一、URL在代码中的位置"></a>一、URL在代码中的位置</h3><h5 id="1-模板-html-中："><a href="#1-模板-html-中：" class="headerlink" title="1. 模板[html]中："></a>1. 模板[html]中：</h5><ul><li><code>&lt;a href=&#39;url&#39;&gt;超链接&lt;/a&gt;</code>，点击后，页面跳转到url</li><li><code>form action=&#39;url&#39; method=&#39;post&#39;&gt;</code>，form表单中的数据，用post方法提交至url</li></ul><h5 id="2-视图函数中："><a href="#2-视图函数中：" class="headerlink" title="2. 视图函数中："></a>2. 视图函数中：</h5><ul><li>302跳转，HttpResponseRedirect(‘url’)，将用户地址栏中的地址跳转到url</li></ul><h3 id="二、代码中URL书写规范"><a href="#二、代码中URL书写规范" class="headerlink" title="二、代码中URL书写规范"></a>二、代码中URL书写规范</h3><h5 id="1-绝对地址：http-127-0-0-1-8000-page-1"><a href="#1-绝对地址：http-127-0-0-1-8000-page-1" class="headerlink" title="1. 绝对地址：http://127.0.0.1:8000/page/1"></a>1. 绝对地址：<code>http://127.0.0.1:8000/page/1</code></h5><h5 id="2-相对地址："><a href="#2-相对地址：" class="headerlink" title="2. 相对地址："></a>2. 相对地址：</h5><ul><li>‘&#x2F;page&#x2F;1’ - ‘&#x2F;‘开头的相对地址，浏览器会把当前地址栏里的协议，ip和端口号加上这个地址，作为最终访问地址<strong>（最佳选择）</strong></li><li>‘page&#x2F;1’ - 没有’&#x2F;‘开头的相对地址，浏览器会根据当前url的最后一个&#x2F;之前的内容加上该行对地址最为最终访问地址</li><li>示例如下：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_url</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_url.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_url_result</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;test url is ok&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># test_url.html</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test url<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://127.0.0.1:8000/test_url_result&quot;</span>&gt;</span>absolute address<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/test_url_result&quot;</span>&gt;</span>relative address beginning with /<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;test_url_result&quot;</span>&gt;</span>relative address not start with /<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;test_url_result&quot;</span>, views.test_url_result)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202209081628565.png" alt="image-20220908162839513"></p><h3 id="三、URL反向解析"><a href="#三、URL反向解析" class="headerlink" title="三、URL反向解析"></a>三、URL反向解析</h3><h5 id="1-定义：url反向解析是指在视图或模板中，用path定义的名称来动态查找或计算出相应的路由"><a href="#1-定义：url反向解析是指在视图或模板中，用path定义的名称来动态查找或计算出相应的路由" class="headerlink" title="1. 定义：url反向解析是指在视图或模板中，用path定义的名称来动态查找或计算出相应的路由"></a>1. 定义：url反向解析是指在视图或模板中，用path定义的名称来动态查找或计算出相应的路由</h5><h5 id="2-path函数的语法："><a href="#2-path函数的语法：" class="headerlink" title="2. path函数的语法："></a>2. path函数的语法：</h5><ul><li>path(route, views, name&#x3D;”别名”)</li><li>path(‘page’, views.page_view, name&#x3D;”page_url”)</li></ul><h5 id="3-根据path中的’name-x3D-’关键字传参给url，确定了唯一一个确定的名字，在模板或视图中，可以通过这个名字反向推断出此url信息"><a href="#3-根据path中的’name-x3D-’关键字传参给url，确定了唯一一个确定的名字，在模板或视图中，可以通过这个名字反向推断出此url信息" class="headerlink" title="3. 根据path中的’name&#x3D;’关键字传参给url，确定了唯一一个确定的名字，在模板或视图中，可以通过这个名字反向推断出此url信息"></a>3. 根据path中的’name&#x3D;’关键字传参给url，确定了唯一一个确定的名字，在模板或视图中，可以通过这个名字反向推断出此url信息</h5><h5 id="4-模板中-通过url标签实现地址的反向解析"><a href="#4-模板中-通过url标签实现地址的反向解析" class="headerlink" title="4. 模板中 - 通过url标签实现地址的反向解析"></a>4. 模板中 - 通过url标签实现地址的反向解析</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% url &#x27;别名&#x27; %&#125;</span><br><span class="line">&#123;% url &#x27;别名&#x27; &#x27;参数值1&#x27; &#x27;参数值2&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">ex:</span><br><span class="line">&#123;% url &#x27;pagen&#x27; &#x27;400&#x27; %&#125;</span><br><span class="line">&#123;% url &#x27;person&#x27; age=&#x27;18&#x27; name=&#x27;gxn&#x27; %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;test_url_result&quot;</span>, views.test_url_result, name=<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># test_url.html</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test url<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;tr&#x27; %&#125;&quot;</span>&gt;</span>url reverse resolve<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-视图函数中-调用djang中的reverse方法进行反向解析"><a href="#5-视图函数中-调用djang中的reverse方法进行反向解析" class="headerlink" title="5. 视图函数中 - 调用djang中的reverse方法进行反向解析"></a>5. 视图函数中 - 调用djang中的reverse方法进行反向解析</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line">reverse(<span class="string">&#x27;别名&#x27;</span>, args=[], kwargs=&#123;&#125;)</span><br><span class="line"></span><br><span class="line">ex:</span><br><span class="line"><span class="built_in">print</span>(reverse(<span class="string">&#x27;pagen&#x27;</span>, args=[<span class="number">300</span>]))</span><br><span class="line"><span class="built_in">print</span>(reverse(<span class="string">&#x27;person&#x27;</span>, kwargs=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;xixi&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_url_result</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line">    url = reverse(<span class="string">&#x27;base_index&#x27;</span>)  <span class="comment"># 有参数可以加参数(&#x27;base_index&#x27;, ...)</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(url)</span><br><span class="line">    <span class="comment"># return HttpResponse(&#x27;test url is ok&#x27;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
            <tag> URL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django基本操作（3）</title>
      <link href="/2022/09/08/Django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%883%EF%BC%89/"/>
      <url>/2022/09/08/Django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、传统的MVC模式"><a href="#一、传统的MVC模式" class="headerlink" title="一、传统的MVC模式"></a>一、传统的MVC模式</h3><h5 id="1-MVC代表Model-View-Controller（模型-视图-控制器）模式"><a href="#1-MVC代表Model-View-Controller（模型-视图-控制器）模式" class="headerlink" title="1. MVC代表Model-View-Controller（模型-视图-控制器）模式"></a>1. MVC代表Model-View-Controller（模型-视图-控制器）模式</h5><ul><li>M模型层，主要用于对数据库层的封装</li><li>V视图层，用于向用户展示结果（WHAT+HOW）</li><li>C控制器，用于处理请求、获取数据、返回结果（重要）</li></ul><h5 id="2-作用：降低模块间的耦合度（解耦）"><a href="#2-作用：降低模块间的耦合度（解耦）" class="headerlink" title="2. 作用：降低模块间的耦合度（解耦）"></a>2. 作用：降低模块间的耦合度（解耦）</h5><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202209070843339.png" alt="image-20220907084346186"></p><h3 id="二、Django的MTV模式"><a href="#二、Django的MTV模式" class="headerlink" title="二、Django的MTV模式"></a>二、Django的MTV模式</h3><h5 id="1-MTV代表Model-Template-View（模型-模板-视图）模式"><a href="#1-MTV代表Model-Template-View（模型-模板-视图）模式" class="headerlink" title="1. MTV代表Model-Template-View（模型-模板-视图）模式"></a>1. MTV代表Model-Template-View（模型-模板-视图）模式</h5><ul><li>M模型层，负责与数据库交互</li><li>T模板曾，负责呈现内容到浏览器（HOW）</li><li>V视图层，是核心，负责接收请求、获取数据、返回结果（WHAT）</li></ul><h5 id="2-作用：降低模块间的耦合度（解耦）-1"><a href="#2-作用：降低模块间的耦合度（解耦）-1" class="headerlink" title="2. 作用：降低模块间的耦合度（解耦）"></a>2. 作用：降低模块间的耦合度（解耦）</h5><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202209070847402.png" alt="image-20220907084721303"></p><h3 id="三、模板层"><a href="#三、模板层" class="headerlink" title="三、模板层"></a>三、模板层</h3><h5 id="1-模板是可以根据字典数据动态变化的html网页"><a href="#1-模板是可以根据字典数据动态变化的html网页" class="headerlink" title="1. 模板是可以根据字典数据动态变化的html网页"></a>1. 模板是可以根据字典数据动态变化的html网页</h5><h5 id="2-模板可以根据视图中传递的字典数据动态生成相应的HTML网页"><a href="#2-模板可以根据视图中传递的字典数据动态生成相应的HTML网页" class="headerlink" title="2. 模板可以根据视图中传递的字典数据动态生成相应的HTML网页"></a>2. 模板可以根据视图中传递的字典数据动态生成相应的HTML网页</h5><h5 id="3-模板配置："><a href="#3-模板配置：" class="headerlink" title="3. 模板配置："></a>3. 模板配置：</h5><ul><li><p>创建模板文件夹&lt;项目名&gt;&#x2F;template</p></li><li><p>在settings.py中TEMPLATE配置项</p><ul><li><p>BACKEND：指定模板的引擎</p></li><li><p>DIRS：模板的搜索目录（可以是一个或者多个） # <strong>主要就是配置这项</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;DIRS&quot;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],</span><br></pre></td></tr></table></figure></li><li><p>APP_DIRS：是否要再应用中的template文件夹中搜索模板文件</p></li><li><p>OPTIONS：有关模板的选项</p></li></ul></li></ul><h5 id="4-模板的加载方式："><a href="#4-模板的加载方式：" class="headerlink" title="4. 模板的加载方式："></a>4. 模板的加载方式：</h5><ul><li><p>方案1 - 通过loader获取模板，通过HttpResponse进行响应在视图中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader </span><br><span class="line"><span class="comment"># 1. 通过loader加载模板</span></span><br><span class="line">t = loader.get_template(<span class="string">&quot;模板文件名&quot;</span>)</span><br><span class="line"><span class="comment"># 2. 将t转换成HTML字符串</span></span><br><span class="line">html = t.render(字典数据)</span><br><span class="line"><span class="comment"># 3. 用响应对象将转换的字符串内容返回给浏览器</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 案例：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. 在项目文件夹中新建模板文件夹templates，在该文件中编写html文件(test_html.html)</span></span><br><span class="line"><span class="string">2. 在views.py文件中绑定模板</span></span><br><span class="line"><span class="string">3. 在urls.py文件中绑定路由</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;test_html&quot;</span>, views.test_html), </span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_html</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line">    t = loader.get_template(<span class="string">&#x27;test_html.html&#x27;</span>)</span><br><span class="line">    html = t.render()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure></li><li><p>方案2 - 使用render()直接加载并响应模板（简洁，常用）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_html</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># scheme1</span></span><br><span class="line">    <span class="comment"># from django.template import loader</span></span><br><span class="line">    <span class="comment"># t = loader.get_template(&#x27;test_html.html&#x27;)</span></span><br><span class="line">    <span class="comment"># html = t.render()</span></span><br><span class="line">    <span class="comment"># return HttpResponse(html)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># scheme2</span></span><br><span class="line">    <span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_html.html&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-视图层与模板层之间的交互"><a href="#5-视图层与模板层之间的交互" class="headerlink" title="5. 视图层与模板层之间的交互"></a>5. 视图层与模板层之间的交互</h5><ul><li><p>视图函数中可以将python变量封装到字典中传递到模板</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">xxx_view</span>(<span class="params">request</span>):</span><br><span class="line">    dic = &#123;</span><br><span class="line">        <span class="string">&quot;变量1&quot;</span>: <span class="string">&quot;值1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;变量2&quot;</span>: <span class="string">&quot;值2&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;xxx.html&#x27;</span>, dic)</span><br></pre></td></tr></table></figure></li><li><p>模板中，我们可以用的语法调用视图传进来的变量</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_html</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line">    dic = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;guoxiaonao&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_html.html&#x27;</span>, dic)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># test_html.html</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span> &#123;&#123;username&#125;&#125; belong to template layer<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>   # 用&#123;&#123;&#125;&#125;接收变量</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="6-模板中的变量使用语法"><a href="#6-模板中的变量使用语法" class="headerlink" title="6. 模板中的变量使用语法"></a>6. 模板中的变量使用语法</h5><ul><li><p><code>&#123;&#123;变量名&#125;&#125;</code></p></li><li><p><code>&#123;&#123;变量名.index&#125;&#125;</code></p></li><li><p><code>&#123;&#123;变量名.key&#125;&#125;</code></p></li><li><p><code>&#123;&#123;对象.方法&#125;&#125;</code></p></li><li><p><code>&#123;&#123;函数名&#125;&#125;</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_html_param</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line">    dic[<span class="string">&#x27;int&#x27;</span>] = <span class="number">88</span></span><br><span class="line">    dic[<span class="string">&#x27;str&#x27;</span>] = <span class="string">&#x27;guoxiaonao&#x27;</span></span><br><span class="line">    dic[<span class="string">&#x27;list&#x27;</span>] = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>]</span><br><span class="line">    dic[<span class="string">&#x27;dict&#x27;</span>] = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">8</span>&#125;</span><br><span class="line">    dic[<span class="string">&#x27;func&#x27;</span>] = say_hi</span><br><span class="line">    dic[<span class="string">&#x27;class_obj&#x27;</span>] = Dog()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test_html_param.html&#x27;</span>, dic)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hi</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;wangwang&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># test_html_param.html</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>int is &#123;&#123; int &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>str is &#123;&#123; str &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>list is &#123;&#123; list &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>list is &#123;&#123; list.0 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>dict is &#123;&#123; dict &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>dict[&#x27;a&#x27;] is &#123;&#123; dict.a &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>function is &#123;&#123; func &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>class_obj is &#123;&#123; class_obj.say &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;test_html_param&quot;</span>, views.test_html_param),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h5 id="7-模板标签"><a href="#7-模板标签" class="headerlink" title="7. 模板标签"></a>7. 模板标签</h5><ul><li><p>作用：将一些服务器的功能嵌入到模板中，例如流程控制等</p></li><li><p>语法：<code>&#123;% 标签 %&#125;</code> <code>&#123;% 结束标签 %&#125;</code></p></li><li><p>if标签：</p><ul><li><p>语法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> 条件表达式<span class="number">1</span> %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% <span class="keyword">elif</span> 条件表达式<span class="number">2</span> %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% <span class="keyword">elif</span> 条件表达式<span class="number">3</span> %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% endif %&#125; <span class="comment"># 重要，必须得有！</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注意：在if标记中实际括号是无效的语法。可以使用嵌套的if标记来指示优先级</strong></p></li><li><p>练习：写一个简单的计算器页面，能够在服务端进行简单加减乘除计算</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># mycal.html</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>mycal<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/mycal&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; x &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;op&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;add&#x27;</span> &#123;% <span class="attr">if</span> <span class="attr">op</span> == <span class="string">&#x27;add&#x27;</span>%&#125;<span class="attr">selected</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span> + <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;sub&#x27;</span> &#123;% <span class="attr">if</span> <span class="attr">op</span> == <span class="string">&#x27;sub&#x27;</span>%&#125;<span class="attr">selected</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span> - <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;mul&#x27;</span> &#123;% <span class="attr">if</span> <span class="attr">op</span> == <span class="string">&#x27;mul&#x27;</span>%&#125;<span class="attr">selected</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span> * <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;div&#x27;</span> &#123;% <span class="attr">if</span> <span class="attr">op</span> == <span class="string">&#x27;div&#x27;</span>%&#125;<span class="attr">selected</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span> / <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;y&quot;</span> <span class="attr">valeu</span>=<span class="string">&quot;&#123;&#123; y &#125;&#125;&quot;</span>&gt;</span> = <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; result &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;calculate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_mycal</span>(<span class="params">request</span>):</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;mycal.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        x = <span class="built_in">int</span>(request.POST[<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">        y = <span class="built_in">int</span>(request.POST[<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">        op = request.POST[<span class="string">&#x27;op&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">        <span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">            result = x + y</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;sub&#x27;</span>:</span><br><span class="line">            result = x - y</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;mul&#x27;</span>:</span><br><span class="line">            result = x * y</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;div&#x27;</span>:</span><br><span class="line">            result = x / y</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;mycal.html&#x27;</span>, <span class="built_in">locals</span>())  <span class="comment"># locals() can record the local variable</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;mycal&quot;</span>, views.test_mycal),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>for标签：</p><ul><li><p>语法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象 %&#125;</span><br><span class="line">...循环语句</span><br><span class="line">&#123;% empty %&#125;</span><br><span class="line">...可迭代对象无数据时填充的语句</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li><p>内置变量 - forloop</p><ul><li>forlop.counter    循环的当前迭代（从1开始索引）</li><li>forloop.cunter0     循环的当前迭代（从0开始索引）</li><li>forloop.revcounter      counter值的倒序</li><li>forloop.revcounter0      revcounter值的倒序</li><li>forloop.first     如果这是第一次通过循环，则为真</li><li>forloop.last      如果这是最后一次循环，则为真</li><li>forloop.parentloop    当嵌套循环，parentloop表示外层循环</li></ul></li></ul></li></ul><h5 id="8-模板过滤器"><a href="#8-模板过滤器" class="headerlink" title="8. 模板过滤器"></a>8. 模板过滤器</h5><ul><li>定义：在变量输出时对变量的值进行过滤</li><li>作用：可以通过使用过滤器来改变变量的输出显示</li><li>语法：<code>&#123;&#123; 变量 | 过滤器1：'参数值1' | 过滤器2：'参数值2' ...&#125;&#125;</code></li><li>常用过滤器：<ul><li>lower         将字符串转换为全部小写</li><li>upper        将字符串转换为大写形式</li><li>safe           默认不对变量内的字符串进行html转义</li><li>add: “n”    将value的值增加n</li><li>…</li></ul></li></ul><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202209081011749.png" alt="image-20220908101114692"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202209081013812.png" alt="image-20220908101307743"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202209081020616.png" alt="image-20220908102031555"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202209081019170.png" alt="image-20220908101951102"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
            <tag> MTV </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django基本操作（2）</title>
      <link href="/2022/09/06/Django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%882%EF%BC%89/"/>
      <url>/2022/09/06/Django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h5 id="无论是GET还是POST，统一都由视图函数接收请求，通过判断request-method区分具体的请求动作"><a href="#无论是GET还是POST，统一都由视图函数接收请求，通过判断request-method区分具体的请求动作" class="headerlink" title="无论是GET还是POST，统一都由视图函数接收请求，通过判断request.method区分具体的请求动作"></a>无论是GET还是POST，统一都由视图函数接收请求，通过判断request.method区分具体的请求动作</h5><p>例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">    处理GET请求时的业务逻辑</span><br><span class="line"><span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">    处理POST请求的业务逻辑</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    其他请求业务逻辑</span><br></pre></td></tr></table></figure><h3 id="一、GET处理"><a href="#一、GET处理" class="headerlink" title="一、GET处理"></a>一、GET处理</h3><h5 id="1-GET请求动作，一般用于向服务器获取数据（少量、非敏感）。能够产生GET请求的场景："><a href="#1-GET请求动作，一般用于向服务器获取数据（少量、非敏感）。能够产生GET请求的场景：" class="headerlink" title="1. GET请求动作，一般用于向服务器获取数据（少量、非敏感）。能够产生GET请求的场景："></a>1. GET请求动作，一般用于向服务器获取数据（少量、非敏感）。能够产生GET请求的场景：</h5><ul><li>浏览器地址栏中输入URL，回车后</li><li><code>&lt;a href=&quot;地址?参数=值&amp;参数=值&quot;&gt;</code></li><li>form表单中的method为get</li></ul><h5 id="2-方法示例"><a href="#2-方法示例" class="headerlink" title="2. 方法示例"></a>2. 方法示例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.GET[<span class="string">&#x27;参数名&#x27;</span>]  <span class="comment"># QueryDict</span></span><br><span class="line">request.GET.get(<span class="string">&#x27;参数名&#x27;</span>, <span class="string">&#x27;默认值&#x27;</span>)  <span class="comment"># 如果没有查询的值，则返回默认值，上面的方法则不能</span></span><br><span class="line">request.GET.getlist(<span class="string">&#x27;参数名&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;test_get_post&quot;</span>, views.test_get_post)</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># test_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_get_post</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(request.GET)</span><br><span class="line">        <span class="built_in">print</span>(request.GET[<span class="string">&#x27;a&#x27;</span>])  <span class="comment"># report error when there is no value of a</span></span><br><span class="line">        <span class="built_in">print</span>(request.GET.get(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;no c&#x27;</span>))  <span class="comment"># no error even there is no value of c</span></span><br><span class="line">        <span class="built_in">print</span>(request.GET.getlist(<span class="string">&#x27;a&#x27;</span>))  <span class="comment"># get multiple value</span></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;--test get post is ok--&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 终端显示</span></span><br><span class="line"></span><br><span class="line">&lt;QueryDict: &#123;<span class="string">&#x27;a&#x27;</span>: [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]&#125;&gt;  <span class="comment"># request.GET</span></span><br><span class="line">2<span class="comment"># request.GET(&#x27;a&#x27;)</span></span><br><span class="line">no c<span class="comment"># request.GET.get(&#x27;c&#x27;, &#x27;no c&#x27;)</span></span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]   <span class="comment"># request.GET.getlist(&#x27;a&#x27;)</span></span><br><span class="line">[06/Sep/2022 12:25:36] <span class="string">&quot;GET /test_get_post?a=1&amp;a=2 HTTP/1.1&quot;</span> 200 23</span><br></pre></td></tr></table></figure><h3 id="二、POST处理"><a href="#二、POST处理" class="headerlink" title="二、POST处理"></a>二、POST处理</h3><h5 id="1-POST请求动作，一般用于向服务器提交数据（大量、敏感）。"><a href="#1-POST请求动作，一般用于向服务器提交数据（大量、敏感）。" class="headerlink" title="1. POST请求动作，一般用于向服务器提交数据（大量、敏感）。"></a>1. POST请求动作，一般用于向服务器提交数据（大量、敏感）。</h5><ul><li><p>客户端通过表单等POST请求将数据传递给服务器端，如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;form method=<span class="string">&#x27;post&#x27;</span> action=<span class="string">&quot;/login&quot;</span>&gt;</span><br><span class="line">姓名:&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li><li><p>服务端接收参数：（取消setting.py中的CSRF验证 #MIDDLEWARE[]中，否则Django将会拒绝客户端发来的POST请求，报403响应）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.POST[<span class="string">&#x27;参数名&#x27;</span>]  <span class="comment"># QueryDict</span></span><br><span class="line">request.POST.get(<span class="string">&#x27;参数名&#x27;</span>, <span class="string">&#x27;默认值&#x27;</span>)  <span class="comment"># 如果没有查询的值，则返回默认值，上面的方法则不能</span></span><br><span class="line">request.POST.getlist(<span class="string">&#x27;参数名&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-方法示例-1"><a href="#2-方法示例-1" class="headerlink" title="2. 方法示例"></a>2. 方法示例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line">POST_FORM = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;form method=&#x27;post&#x27; action=&#x27;/test_get_post&#x27;</span></span><br><span class="line"><span class="string">    username: &lt;input type=&#x27;text&#x27; name=&#x27;uname&#x27;&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&#x27;submit&#x27; value=&#x27;submit&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;/from&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_get_post</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(POST_FORM)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>((<span class="string">&#x27;uname is&#x27;</span>, request.POST[<span class="string">&#x27;uname&#x27;</span>]))</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;post is ok&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;--test get post is ok--&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;test_get_post&quot;</span>, views.test_get_post)</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
            <tag> GET </tag>
            
            <tag> POST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 基本操作（1）</title>
      <link href="/2022/09/06/django-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%881%EF%BC%89/"/>
      <url>/2022/09/06/django-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Django安装及配置"><a href="#一、Django安装及配置" class="headerlink" title="一、Django安装及配置"></a>一、Django安装及配置</h3><h5 id="1-配置虚拟环境"><a href="#1-配置虚拟环境" class="headerlink" title="1. 配置虚拟环境"></a>1. 配置虚拟环境</h5><ul><li><p>安装python-setuptools</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install python-setuptools</span><br></pre></td></tr></table></figure></li><li><p>安装virtualenv</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install virtualenv</span><br></pre></td></tr></table></figure></li><li><p>创建虚拟环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo virtualenv django</span><br></pre></td></tr></table></figure></li><li><p>激活虚拟环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ./django/bin/activate</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-安装django"><a href="#2-安装django" class="headerlink" title="2. 安装django"></a>2. 安装django</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install django  <span class="comment"># 也可指定版本号</span></span><br></pre></td></tr></table></figure><h3 id="二、项目结构"><a href="#二、项目结构" class="headerlink" title="二、项目结构"></a>二、项目结构</h3><h5 id="1-创建项目文件夹"><a href="#1-创建项目文件夹" class="headerlink" title="1. 创建项目文件夹"></a>1. 创建项目文件夹</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django-admin startproject mysite1  <span class="comment"># 创建mysite1项目文件夹</span></span><br></pre></td></tr></table></figure><h5 id="2-启动服务（测试开发阶段）"><a href="#2-启动服务（测试开发阶段）" class="headerlink" title="2. 启动服务（测试开发阶段）"></a>2. 启动服务（测试开发阶段）</h5><p>进入项目文件夹mysite1中，执行启动命令，然后浏览器访问127.0.0.1：8000即可看到小火箭</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> mysite1</span><br><span class="line">python3 manage.py runserver 8000  <span class="comment"># 不写端口号时默认为8000</span></span><br></pre></td></tr></table></figure><h5 id="3-关闭服务：执行Ctrl-c-或者杀进程ID"><a href="#3-关闭服务：执行Ctrl-c-或者杀进程ID" class="headerlink" title="3. 关闭服务：执行Ctrl + c 或者杀进程ID"></a>3. 关闭服务：执行Ctrl + c 或者杀进程ID</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:8000  <span class="comment"># 查看django进程ID(如果有多个，杀listen状态那的进程)</span></span><br><span class="line"><span class="built_in">kill</span> -9 ID  <span class="comment"># 杀死django进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果启动时报错 Error：The port is already in use 则杀掉那个进程，或者另换端口号</span></span><br></pre></td></tr></table></figure><h5 id="4-mysite1文件夹树状结构"><a href="#4-mysite1文件夹树状结构" class="headerlink" title="4. mysite1文件夹树状结构"></a>4. mysite1文件夹树状结构</h5><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202209021002284.png" alt="image-20220902100200235"></p><h5 id="5-manage-py包含项目管理的子命令，执行python3可列出所有的django子命令"><a href="#5-manage-py包含项目管理的子命令，执行python3可列出所有的django子命令" class="headerlink" title="5. manage.py包含项目管理的子命令，执行python3可列出所有的django子命令"></a>5. manage.py包含项目管理的子命令，执行python3可列出所有的django子命令</h5><h5 id="6-项目同名文件夹（同级目录）mysite1，包含如下文件："><a href="#6-项目同名文件夹（同级目录）mysite1，包含如下文件：" class="headerlink" title="6. 项目同名文件夹（同级目录）mysite1，包含如下文件："></a>6. 项目同名文件夹（同级目录）mysite1，包含如下文件：</h5><ul><li><code>_init_</code>: python包的初始化文件</li><li><code>wsgi.py</code>: WEB服务网关的配置文件-django正式启动时，需要用到</li><li><code>urls.py</code>: 项目的主路由配置-HTTP请求进入django时，优先调用该文件</li><li><code>settings.py</code>: 项目的配置文件-包含项目启动时需要的配置</li></ul><h3 id="三、路由配置"><a href="#三、路由配置" class="headerlink" title="三、路由配置"></a>三、路由配置</h3><p><strong>URL: <code>protocal ://hostname[:port]/path[?query][#fragment]</code></strong></p><h5 id="1-访问127-0-0-1-x2F-page-x2F-1"><a href="#1-访问127-0-0-1-x2F-page-x2F-1" class="headerlink" title="1. 访问127.0.0.1&#x2F;page&#x2F;1"></a>1. 访问127.0.0.1&#x2F;page&#x2F;1</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 127.0.0.1/page/1</span></span><br><span class="line">    path(<span class="string">&quot;page/1&quot;</span>, views.page1_view),  <span class="comment"># page/1或者page/1/都可</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page1_view</span>(<span class="params">request</span>):</span><br><span class="line">    html = <span class="string">&quot;&lt;h1&gt;It&#x27;s the first page!&lt;/h1&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><h5 id="2-path-函数："><a href="#2-path-函数：" class="headerlink" title="2. path()函数："></a>2. path()函数：</h5><ul><li><p>导入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br></pre></td></tr></table></figure></li><li><p>语法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(route, views, name=<span class="literal">None</span>) </span><br><span class="line"><span class="comment"># route: 字符串类型，匹配的请求路径</span></span><br><span class="line"><span class="comment"># views: 指定路径所对应的试图处理函数的名称</span></span><br><span class="line"><span class="comment"># name:  为地址起别名，在模板中地址反向解析时使用</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="3-path转换器"><a href="#3-path转换器" class="headerlink" title="3. path转换器"></a>3. path转换器</h5><ul><li><p>语法：<code>&lt;转换器类型:自定义名&gt;</code></p></li><li><p>作用：若转换器类型匹配到对应类型的数据，则将数据按照关键字传参的方式传递给视图函数</p></li><li><p>例子：<code>path(&#39;page/&lt;int:page&gt;&#39;, views.xxx)</code></p></li><li><p>做一个计算器：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal_view</span>(<span class="params">request, n, op, m</span>):</span><br><span class="line">    <span class="keyword">if</span> op <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;sub&#x27;</span>, <span class="string">&#x27;mul&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Your op is wrong&quot;</span>)</span><br><span class="line"></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">        result = n + m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;sub&#x27;</span>:</span><br><span class="line">        result = n - m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;mul&#x27;</span>:</span><br><span class="line">        result = n * m</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">&quot;The result is %s&quot;</span> % result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># calculator</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:n&gt;/&lt;str:op&gt;/&lt;int:m&gt;&quot;</span>, views.cal_view) </span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-re-path"><a href="#4-re-path" class="headerlink" title="4. re_path()"></a>4. re_path()</h5><ul><li><p>在url的匹配过程中可以使用正则表达式进行精确匹配</p></li><li><p>语法：</p><ul><li><p>re_path(reg, view, name&#x3D;xxx)</p></li><li><p>正则表达式为命名分组模式<code>(?&lt;name&gt;pattern)</code>；匹配提取参数后用关键字传参方式给视图函数</p></li><li><p>用正则表达式做一个计算器，只能计算两位数与两位数的运算：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># calculator2</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^(?P&lt;x&gt;\d&#123;1,2&#125;)/(?P&lt;op&gt;\w+)/(?P&lt;y&gt;\d&#123;1,2&#125;)$&#x27;</span>, views.cal2_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal2_view</span>(<span class="params">request, x, op, y</span>):</span><br><span class="line">    html = <span class="string">&quot;x:%s op:%s y:%s&quot;</span> % (x, op, y)  <span class="comment"># 省略了计算过程</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure></li><li><p>用正则表达式做一个生日显示：127.0.0.1:8000&#x2F;2003&#x2F;02&#x2F;03或者127.0.0.1:8000&#x2F;02&#x2F;03&#x2F;2003</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">birthday_view</span>(<span class="params">request, y, m, d</span>):</span><br><span class="line">    html = <span class="string">&quot;the birthday is %s/%s/%s&quot;</span> % (y, m, d)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    re_path(<span class="string">r&#x27;^birthday/(?P&lt;y&gt;\d&#123;4&#125;)/(?P&lt;m&gt;\d&#123;1,2&#125;)/(?P&lt;d&gt;\d&#123;1,2&#125;)$&#x27;</span>, views.birthday_view),</span><br><span class="line">    re_path(<span class="string">r&#x27;^birthday/(?P&lt;m&gt;\d&#123;1,2&#125;)/(?P&lt;d&gt;\d&#123;1,2&#125;)/(?P&lt;y&gt;\d&#123;4&#125;)$&#x27;</span>, views.birthday_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习随笔（2）</title>
      <link href="/2022/08/02/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%882%EF%BC%89/"/>
      <url>/2022/08/02/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="一、CSS简介"><a href="#一、CSS简介" class="headerlink" title="一、CSS简介"></a>一、CSS简介</h4><h5 id="1-1-CSS-网页美容师"><a href="#1-1-CSS-网页美容师" class="headerlink" title="1.1 CSS-网页美容师"></a>1.1 CSS-网页美容师</h5><p>CSS是<strong>层叠样式表</strong>（Cascading Style sheets）的简称。有时也称<strong>CSS样式表</strong>或者<strong>级联样式表</strong>，也是一种标记语言。</p><p>CSS最大价值：让HTML专注去做结构呈现，样式交给CSS，即<strong>结构（HTML）与样式（CSS）相分离</strong>。</p><h5 id="1-2-CSS语法规范"><a href="#1-2-CSS语法规范" class="headerlink" title="1.2 CSS语法规范"></a>1.2 CSS语法规范</h5><p>选择器{一条或者多条声明}</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208021505545.png" alt="image-20220802150550470"></p><h5 id="1-3-CSS代码风格"><a href="#1-3-CSS代码风格" class="headerlink" title="1.3 CSS代码风格"></a>1.3 CSS代码风格</h5><ol><li>使用展开格式，直观清晰</li><li>选择器，属性名，属性值关键字等全部使用小写字母，特殊情况除外</li><li>选择器和大括号中间保留空格；冒号后面，属性值前面，保留一个空格</li></ol><h4 id="二、CSS基础选择器"><a href="#二、CSS基础选择器" class="headerlink" title="二、CSS基础选择器"></a>二、CSS基础选择器</h4><p>选择器分类：基础选择器和复合选择器</p><p>基础选择器是由单个选择器组成的，主要包括标签选择器、类选择器、id选择器和通配符选择器</p><h5 id="2-1-标签选择器"><a href="#2-1-标签选择器" class="headerlink" title="2.1 标签选择器"></a>2.1 标签选择器</h5><p>用HTML标签名称作为选择器，按标签名称分类，为页面中的某一类标签指定样式</p><p>局限性：不能设计差异化样式，只能选择全部的当前样式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-2-类选择器"><a href="#2-2-类选择器" class="headerlink" title="2.2 类选择器"></a>2.2 类选择器</h5><p>记忆口诀：样式点定义，结构类调用，一个或多个，开发最常用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多类名：(提高代码复用性，布局清晰)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.font35</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red font35&quot;</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-id选择器"><a href="#2-3-id选择器" class="headerlink" title="2.3 id选择器"></a>2.3 id选择器</h5><p>创建和调用与类选择器几乎是一样的，#创建，id调用</p><p>区别是id调用最好具有唯一性，即最好留给后面js的人用，避免调用元素时出现冲突</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-4-通配符选择器"><a href="#2-4-通配符选择器" class="headerlink" title="2.4 通配符选择器"></a>2.4 通配符选择器</h5><p>选择页面中的所有元素（标签）</p><p>不需要调用，自动给所有元素添加样式</p><p>在特殊情况下才使用，如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-基础选择器总结"><a href="#2-5-基础选择器总结" class="headerlink" title="2.5 基础选择器总结"></a>2.5 基础选择器总结</h5><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208021610196.png" alt="image-20220802161022115"></p><h4 id="三、CSS字体属性"><a href="#三、CSS字体属性" class="headerlink" title="三、CSS字体属性"></a>三、CSS字体属性</h4><h5 id="3-1-字体系列"><a href="#3-1-字体系列" class="headerlink" title="3.1 字体系列"></a>3.1 字体系列</h5><p>使用<code>font-family</code>定义字体系列</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">p &#123; font-family: &quot;微软雅黑&quot;&#125;</span><br><span class="line">div &#123; font-family: Arial, &quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li><p>各个字体之间使用英文逗号隔开（因为有些字体系列不止一个单词）</p></li><li><p>如果有多个单词组成的字体系列，加引号</p></li><li><p>尽量使用默认字体，保证所有用户的浏览器都可正常访问</p></li><li><p>最常见的几个字体：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">body &#123; font-family: &quot;Microsoft Yahei&quot;, tahoma, arial, &quot;Hiragino Sans GB&quot;&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="3-2-字体属性"><a href="#3-2-字体属性" class="headerlink" title="3.2 字体属性"></a>3.2 字体属性</h5><p>字体大小：<code>font-size</code>(给body指定文字时，标题不受限制，需要单独制定；谷歌浏览器默认字体大小为16px)</p><p>字体粗细：<code>font-weight</code>（normal&#x3D;400, bold&#x3D;700; 尽可能使用数字而不用单词，数字从100到900）</p><p>字体样式：<code>font-style</code>（normal 不倾斜，italic 倾斜；实际开发中使倾斜文字恢复成不倾斜文字，如em、i)</p><p>字体复合属性：<code>font</code>（节约代码）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* font-style: italic;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        font-weight: 700;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        font-size: 16px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        font-family: &quot;Microsoft Yahei&quot;; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 复合属性 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">30px</span> <span class="string">&quot;Microsoft Yahei&quot;</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>巴拉巴拉巴拉巴拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>复合属性注意事项：</strong></p><ol><li><p>属性顺序不能改变，严格按照<code>font-style font-weight font-size/line-height font-family</code>的顺序，属性之间用空格隔开</p></li><li><p>不需要设置的属性可以省略（默认值），但是<code>font-size</code>和<code>font-family</code>必须保留，否则<code>font</code>将不起作用</p></li></ol><h4 id="四、文本属性"><a href="#四、文本属性" class="headerlink" title="四、文本属性"></a>四、文本属性</h4><h5 id="4-1-文本颜色"><a href="#4-1-文本颜色" class="headerlink" title="4.1 文本颜色"></a>4.1 文本颜色</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三种颜色表示方式：</p><ol><li>预定义颜色值：red、green、blue等</li><li>十六进制：#FF0000、#FF6600、#29D794等  (最常用)</li><li>RGB代码：rgb(255,0,0)或者rgb(100%,0%,0%)</li></ol><h5 id="4-2-文本对齐"><a href="#4-2-文本对齐" class="headerlink" title="4.2 文本对齐"></a>4.2 文本对齐</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">text-align: center;  # 总共有center、left、right三个属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-文本装饰"><a href="#4-3-文本装饰" class="headerlink" title="4.3 文本装饰"></a>4.3 文本装饰</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">text-decoration: underline: </span><br><span class="line"># none(默认，最常用，常用于删除超链接下划线)、underline（常用）、overline（几乎不用）、line-through 不常用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-文本缩进"><a href="#4-4-文本缩进" class="headerlink" title="4.4 文本缩进"></a>4.4 文本缩进</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">text-indent: 10px;  # 将段落的首行缩进10px</span><br><span class="line">text-indent: 2em;   # em是一个相对单位，即当前元素（font-size)1个文字的大小，如果当前元素没设置大小，则按照父元素设置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-5-行间距"><a href="#4-5-行间距" class="headerlink" title="4.5 行间距"></a>4.5 行间距</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">line-height: 26px;  # 行高=上间距+文本高度+下间距，其中文本高度是设定好的，上下间距是相等的，设置行高就是调整上下间距</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五、CSS引入方式"><a href="#五、CSS引入方式" class="headerlink" title="五、CSS引入方式"></a>五、CSS引入方式</h4><h5 id="5-1-CSS的三种样式表"><a href="#5-1-CSS的三种样式表" class="headerlink" title="5.1 CSS的三种样式表"></a>5.1 CSS的三种样式表</h5><ol><li>行内样式表（行内式）</li><li>内部样式表（嵌入式）</li><li>外部样式表（链接式）</li></ol><h5 id="5-2-行内样式表"><a href="#5-2-行内样式表" class="headerlink" title="5.2 行内样式表"></a>5.2 行内样式表</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span></span><br><span class="line">    巴拉巴拉  # 临时使用、少量使用、不推荐大量使用</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-3-内部样式表"><a href="#5-3-内部样式表" class="headerlink" title="5.3 内部样式表"></a>5.3 内部样式表</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li><code>&lt;style&gt;</code>标签理论上可以放在HTML文档的任何位置，但习惯上放在<code>&lt;head&gt;</code>标签中</li><li>代码结构清晰，但并没有实现结构与样式的完全分离</li><li>常用与练习中或测试</li></ol><h5 id="5-4-外部样式表"><a href="#5-4-外部样式表" class="headerlink" title="5.4 外部样式表"></a>5.4 外部样式表</h5><p><strong>实际开发都是外部样式表，适合于样式比较多的情况。可以控制多个页面</strong></p><p>引入外部样式表分两步：</p><ol><li>新建一个后缀名为.css的样式文件，把所有CSS代码都放到此文件中</li><li>在HTNL页面中，使用<code>&lt;link&gt;</code>标签引入这个文件</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css文件路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习随笔（1）</title>
      <link href="/2022/08/01/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94(1)/"/>
      <url>/2022/08/01/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94(1)/</url>
      
        <content type="html"><![CDATA[<h4 id="一、前端三大标准：结构-HTML-、表现-CSS-、行为-JS"><a href="#一、前端三大标准：结构-HTML-、表现-CSS-、行为-JS" class="headerlink" title="一、前端三大标准：结构(HTML)、表现(CSS)、行为(JS)"></a>一、前端三大标准：结构(HTML)、表现(CSS)、行为(JS)</h4><h4 id="二、基本结构标签："><a href="#二、基本结构标签：" class="headerlink" title="二、基本结构标签："></a>二、基本结构标签：</h4><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011211834.png" alt="image-20220801121149751"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011213639.png" alt="image-20220801121303590"></p><h4 id="三、常用快捷键（VScode）："><a href="#三、常用快捷键（VScode）：" class="headerlink" title="三、常用快捷键（VScode）："></a>三、常用快捷键（VScode）：</h4><ol><li><code>！+ enter/Tab</code>           生成html骨架标签</li><li><code>ctrl + ‘+’   </code>                放大代码（减号缩小代码）</li><li><code>ctrl + N </code>                   新建文件</li><li><code>ctrl + v     </code>                 直接换行粘贴</li></ol><h4 id="四、路径："><a href="#四、路径：" class="headerlink" title="四、路径："></a>四、路径：</h4><ul><li><p>相对路径：</p><ul><li>.代表当前目录，..代表上一级目录，&#x2F;代表下一级目录</li><li><strong>windows里面相对路径使用正斜杠，绝对路径使用反斜杠，网络中的绝对路径使用正斜杠</strong></li></ul></li><li><p>绝对路径：</p><ul><li>本地电脑：<code> &quot;D:\\web\img\logo.gif&quot;</code></li><li>网络地址：<code> &quot;http://www.itcast.cn/images/logo.gif&quot;</code></li></ul></li></ul><h4 id="五、HTML常用标签："><a href="#五、HTML常用标签：" class="headerlink" title="五、HTML常用标签：! ! !"></a>五、HTML常用标签：! ! !</h4><ol><li><p>标题标签：<code>&lt;h1&gt; - &lt;h6&gt;</code></p></li><li><p>段落标签： <code>&lt;p&gt;&lt;/p&gt;</code></p></li><li><p>换行标签：  <code>&lt;br /&gt;</code></p></li><li><p>文本格式化标签：</p><ul><li>加粗：<code>&lt;strong&gt;&lt;/strong&gt;</code>  或者 <code>&lt;b&gt;&lt;/b&gt;</code></li><li>倾斜：<code>&lt;em&gt;&lt;/em&gt;</code>  或者 <code>&lt;i&gt;&lt;/i&gt;</code></li><li>删除线：<code>&lt;del&gt;&lt;/del&gt;</code> 或者<code> &lt;s&gt;&lt;/s&gt;</code></li><li>下划线：<code>&lt;ins&gt;&lt;/ins&gt;</code> 或者 <code>&lt;u&gt;&lt;/u&gt;</code></li></ul></li><li><p>盒子标签：</p><ul><li>大盒子： <code>&lt;div&gt;&lt;/div&gt;</code>  （division）独占一行</li><li>小盒子： <code>&lt;span&gt;&lt;/span&gt;</code>   一行多个</li></ul></li><li><p>图像标签：</p><ul><li><code>&lt;img src=&quot;图像URL&quot; /&gt;</code>  src是<code>&lt;img&gt;</code>的必须属性</li><li><code>&lt;img src=&quot;图像URL&quot; alt=&quot;这个图象是这样的&quot; /&gt;</code>  alt用于在图像无法正常显示时提示图像的相应信息（替换文本）</li><li><code>&lt;img src=&quot;图像URL&quot; title=&quot;名字&quot; /&gt;</code> title用于鼠标放在图像上时显示图像名称（提示文本）</li><li>还有其他属性：width 、height 、border等，一般在CSS中设置，此处不适用</li></ul></li><li><p>超链接标签：</p><ul><li><p><code> &lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt; 文本或图像 &lt;/a&gt;</code>   (a是<code> anchor</code>的首字母)</p></li><li><p>href是必须属性，target用于指定链接页面的打开方式，_self为默认值，_blank为在新窗口打开</p></li><li><p>链接分类：</p><p>​    外部链接：<code>&lt;a href=&quot;http://www.baidu.com&quot;&gt; 百度 &lt;/a&gt;</code></p><p>​    内部链接：<code>&lt;a href=&quot;index.html&quot;&gt; 首页 &lt;/a&gt;</code></p><p>​    空链接：    <code>&lt;a href=&quot;#&quot;&gt; 首页 &lt;/a&gt;</code></p><p>​    下载链接：<code>&lt;a href=&quot;a.zip&quot;&gt; 下载 &lt;/a&gt;</code></p><p>​    网页元素链接：<code>&lt;a href=&quot;www.baidu.com&quot;&gt; &lt;img src=&quot;img.jpg&quot;&gt; &lt;/a&gt; </code></p><p>​    锚点链接： 点击链接，可快速定位到页面中的某个位置</p><p>​        首先在链接文本中的href属性中，设置属性值为#名字的形式，如<code>&lt;a href=&quot;#two&quot;&gt; 第二集 &lt;/a&gt;</code></p><p>​        找到目标位置，里面添加一个id属性&#x3D;刚才的名字，如<code>&lt;h3 id=&quot;two&quot;&gt; 第二集介绍 &lt;/h3&gt;</code></p></li></ul></li><li><p>注释标签：<code>&lt;!-- 注释语句 --&gt;</code> 一般使用快捷键<code>ctrl + /</code></p></li><li><p>特殊字符：</p><ul><li><p>空格符：<code>&amp;nbsp</code></p></li><li><p>小于号：<code>&amp;lt</code></p></li><li><p>大于号：<code>&amp;gt</code></p></li><li><p>其他：现用现查</p></li></ul></li><li><p>表格标签：</p><ul><li><p>包含表格、行、单元格三个元素</p></li><li><p>表格：<code>&lt;table&gt;&lt;/table&gt;</code>、行：<code>&lt;tr&gt;&lt;/tr&gt;</code>、单元格：<code>&lt;td&gt;&lt;/td&gt;</code></p></li><li><p>表头单元格：<code>&lt;th&gt;&lt;/th&gt;</code> （表头单元格里面的内容加粗居中显示）</p></li><li><p>表格结构标签：</p><p>​    表格头部：<code>&lt;thead&gt;&lt;/thead&gt;</code></p><p>​    表格主题：<code>&lt;tbody&gt;&lt;/tbody&gt;</code></p></li><li><p>表格结构：table –&gt; thead、tbody –&gt; th、tr –&gt; td</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011449852.png" alt="image-20220801144934800"></p></li><li><p>合并单元格：</p><p>​    跨行合并：<code>rowspan=&quot;合并单元格的个数&quot;</code></p><p>​    跨列合并：<code>colspan=&quot;合并单元格的个数&quot;</code></p></li><li><p>目标单元格：</p><p>​    跨行：最上侧单元格为目标单元格，写合并代码</p><p>​    跨列：最左侧单元格为目标单元格，写合并代码</p></li><li><p>合并三部曲：<br>1. 确定跨行还是跨列<br> 2. 找到目标单元格，写上合并方式&#x3D;合并的单元格数量，比如：<code>&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</code><br> 3. 删除多余的单元格</p></li></ul></li><li><p>列表标签：</p><ul><li><p>特点：整齐、整洁、有序，作为布局更加自由和方便</p></li><li><p>分类：无序列表、有序列表、自定义列表</p></li><li><p>无序列表（！！！用的非常非常非常多）：</p><p>​    <img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011511793.png" alt="image-20220801151125727"></p></li><li><p>有序列表：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011514867.png" alt="image-20220801151426805"></p></li><li><p>自定义列表（！！！）：</p><p>使用场景：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011516802.png" alt="image-20220801151659732"></p><p>基本语法：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011519706.png" alt="image-20220801151938653"></p></li></ul></li><li><p>表单标签：</p><ul><li><p>组成：表单域、表单控件（表单元素）、提示信息</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011523133.png" alt="image-20220801152328066"></p></li><li><p>表单域：<code>&lt;form&gt;&lt;/form&gt;</code></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011527765.png" alt="image-20220801152718686"></p></li><li><p>表单元素：input、select、textarea</p></li><li><p>input输入表单元素：<code>&lt;input type=&quot;属性值&quot; /&gt;</code> <strong>单标签</strong>，type为必须属性，不同属性指定不同的控件类型，常见的有：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012024255.png" alt="image-20220801202441172"></p><p>除了type属性外，<code>&lt;input&gt;</code>还有很多其他属性，常用属性如下：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012031170.png" alt="image-20220801203144077"></p><p>​    <img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012040691.png" alt="image-20220801204055623"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012041871.png" alt="image-20220801204139798"></p></li><li><p>select下拉表单元素：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012108036.png" alt="image-20220801210810985"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012109066.png" alt="image-20220801210900008"></p></li><li><p>textarea文本域元素：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012112722.png" alt="image-20220801211255671"></p></li></ul></li></ol><h4 id="更多标签，通过查询学习："><a href="#更多标签，通过查询学习：" class="headerlink" title="更多标签，通过查询学习："></a><strong>更多标签，通过查询学习</strong>：</h4><p>W3C: <a href="http://www.w3school.com.cn/">http://www.w3school.com.cn</a></p><p>MDN: <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Burpsuite抓取手机流量</title>
      <link href="/2022/07/31/%E4%BD%BF%E7%94%A8Burpsuite%E6%8A%93%E5%8F%96%E6%89%8B%E6%9C%BA%E6%B5%81%E9%87%8F/"/>
      <url>/2022/07/31/%E4%BD%BF%E7%94%A8Burpsuite%E6%8A%93%E5%8F%96%E6%89%8B%E6%9C%BA%E6%B5%81%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<ol><li><p><strong>查看电脑ip，并在burpsuite中将代理设置成本机ip</strong></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311428718.png" alt="img"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311428713.png" alt="img"></p></li><li><p><strong>从burpsuite中导出证书，后面导入到手机中安装</strong></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311430250.png" alt="img"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311430288.png" alt="img"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311430722.png" alt="img"></p></li><li><p><strong>手机端设置代理（不同手机设置路径不同，下面以华为手机为例）</strong></p><p>长按连接的wifi，点击修改网络，将代理设置为手动，修改服务器主机名和端口号为burpsuite中设置的代理ip和端口号，保存即可</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311436731.png" alt="image-20220731143632586"></p></li><li><p><strong>手机端导入ca证书（以华为手机为例）</strong></p><p>简单的方法就是将电脑端证书传到手机中，微信qq均可，然后点击保存，使用证书安装器打开，验证身份（指纹密码等），输入证书名称和凭据用途，保存即可（此方式最快，还有比较常规的方法，自行百度）</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311440554.png" alt="image-20220731144032426"></p></li><li><p><strong>最最最重要的一步！！！windows关闭防火墙，否则可能无法抓到包！！！</strong></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311442805.png" alt="image-20220731144241759"></p></li><li><p><strong>之后便可愉快地抓包了</strong></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311448119.png" alt="image-20220731144806992"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311448514.png" alt="image-20220731144831478"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻击操作汇总</title>
      <link href="/2022/07/23/%E6%94%BB%E5%87%BB%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
      <url>/2022/07/23/%E6%94%BB%E5%87%BB%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="一、使用hping3进行泛洪攻击"><a href="#一、使用hping3进行泛洪攻击" class="headerlink" title="一、使用hping3进行泛洪攻击"></a>一、使用hping3进行泛洪攻击</h4><p><strong>简介：</strong>hping是面向命令行的用于生成和解析TCP&#x2F;IP协议数据包汇编&#x2F;分析的开源工具。作者是Salvatore Sanfilippo，界面灵感来自ping（8）unix命令，目前最新版是hping3，它支持TCP，UDP，ICMP和RAW-IP协议，具有跟踪路由模式，能够在覆盖的信道之间发送文件以及许多其他功能，支持使用tcl脚本自动化地调用其API。hping是安全审计、防火墙测试等工作的标配工具。hping优势在于能够定制数据包的各个部分，因此用户可以灵活对目标机进行细致地探测</p><ol><li><p><strong>ICMP攻击</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hping3 --icmp --rand-source --flood 192.168.43.175</span><br></pre></td></tr></table></figure></li><li><p><strong>UDP攻击</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hping3 -a 8.8.8.8 --udp -p 444 --flood 192.168.43.175</span><br></pre></td></tr></table></figure></li><li><p><strong>SYN攻击</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hping3 -a 8.8.8.8 -S -p 888 --flood 192.168.43.175  <span class="comment"># -S 采用SYN攻击</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ACK攻击</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hping3 -a 8.8.8.8 -A -p 888 --flood 192.168.43.175</span><br></pre></td></tr></table></figure></li></ol><h4 id="二、使用Hydra进行弱口令爆破"><a href="#二、使用Hydra进行弱口令爆破" class="headerlink" title="二、使用Hydra进行弱口令爆破"></a>二、使用Hydra进行弱口令爆破</h4><p><strong>简介：</strong>Hydra是一款非常强大的暴力破解工具，它是由著名的黑客组织THC开发的一款开源暴力破解工具。Hydra是一个验证性质的工具，主要目的是：展示安全研究人员从远程获取一个系统认证权限。</p><ol><li><p><strong>telnet口令爆破</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -L user.txt -P passwd.txt 192.168.43.175 telnet  <span class="comment"># -L 加载账号字典 -P 加载密码字典 telnet 指定爆破协议（端口）</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ssh口令爆破</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -l admin -P passwd.txt 192.168.43.175 ssh  <span class="comment"># -l 指定用户名 -P 加载密码字典 ssh 指定爆破协议 （端口）</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="三、使用Ettercap进行中间人攻击"><a href="#三、使用Ettercap进行中间人攻击" class="headerlink" title="三、使用Ettercap进行中间人攻击"></a>三、使用Ettercap进行中间人攻击</h4><ol><li><p><strong>ARP欺骗</strong></p><p>攻击：打开图形化Ettercap，嗅探主机，将攻击对象地址添加target1，将伪装地址添加target2，实施ARP欺骗（ARP poisoning）</p><p>防御：</p><ul><li><p>安全软件及防火墙</p></li><li><p>电脑和网关路由器进行ARP双向绑定</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arp -s 192.168.1.1 00-11-22-a1-c6-09</span><br></pre></td></tr></table></figure></li><li><p>网络设备（交换机或者路由器）开启动态ARP检测技术（对arp地址变更者进行判定及惩罚）。</p></li></ul></li><li><p><strong>DNS欺骗</strong></p><p>攻击：先实施ARP欺骗，如1步骤所示，然后编辑ettercap配置文件（&#x2F;etc&#x2F;ettercap&#x2F;etter.dns)，添加如下内容，最后点击插件中的dns_spoof。如果kali机开启apache2服务，则所有主机上网均会指向apache2的页面。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* A 192.168.71.11  <span class="comment"># *代表诱导所有IP指向虚假A记录，后面的IP即是虚假DNS服务器IP（中间人）</span></span><br></pre></td></tr></table></figure><p><strong>避坑：</strong></p><ul><li>做实验时尽可能先清空dns缓存及浏览器上的数据缓存，以免影响实验。（无法上网时也可使用此方法排错）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><ul><li>win10如果手动设置DNS，需要将网关也添加到DNS中，再加一个DNS服务器（还不清楚为什么），否则无法上网。</li></ul></li></ol><h4 id="四、使用yersinia进行DHCP泛洪攻击"><a href="#四、使用yersinia进行DHCP泛洪攻击" class="headerlink" title="四、使用yersinia进行DHCP泛洪攻击"></a>四、使用yersinia进行DHCP泛洪攻击</h4><p><strong>discover泛洪攻击：</strong></p><p>攻击者：kali；   受害者：windows10（使用DHCP）获取地址</p><p>运行kali里面的yersinia工具，发起discover泛洪攻击，耗尽ip地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yersinia -G  <span class="comment"># G代表图形化</span></span><br></pre></td></tr></table></figure><p>此时win10若释放ip，将无法再获取到ip</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig /release</span><br><span class="line">ipconfig /renew</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICMP基础知识</title>
      <link href="/2022/07/21/ICMP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/07/21/ICMP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>参考知乎文章：<a href="https://zhuanlan.zhihu.com/p/254762952">网络排查利器Ping与Traceroute（Tianny）</a></p><h3 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h3><ol><li><p><strong>ICMP</strong> 全称 <strong>Internet Control Message Protocol</strong>，就是<strong>网际控制报文协议</strong>。ICMP 报文是封装在 IP 包里面的，因为传输指令的时候，肯定需要源地址和目标地址。</p></li><li><p>ICMP报文有很多的类型，<strong>主要分为两类，查询报文类型和差错报告报文类型</strong>。</p></li><li><p>查询报文类型简单来说就是查询方主动发送侦查协议，等待对方的应答。具体例子，见下面 ping 的使用；</p><p>差错报文类型会使用 ICMP 的规则，<strong>故意制造一些能够产生错误的场景</strong>，从而达到网络诊断的目的。具体例子，见下面 traceroute 的使用。</p></li><li><p><strong>ping</strong> 这个程序是使用了 ICMP 里面的 ECHO REQUEST（8） 和 ECHO REPLY （0）类型的。经常会遇到一个问题，如果不在我们的控制范围内，很多中间设备都是禁止 ping 的，<strong>但是 ping 不通不代表网络不通</strong>。这个时候就要使用 telnet，通过其他协议来测试网络是否通。</p></li><li><p>差错报文类型会使用 ICMP 规则故意制造一些能够产生错误的场景。<strong>Traceroute</strong> 故意设置特殊的 TTL，来追踪去往目的地时沿途经过的路由器。<strong>Traceroute 的参数指向某个目的IP地址，它会发送一个 UDP 的数据包</strong>。将 TTL 设置成1，也就是说一旦遇到一个路由器或者一个关卡，就表示它“牺牲”了，于是，返回一个ICMP包，也就是网络差错包，类型是时间超时。接下来将将 TTL 设置为 2，第一关过了第二关又“牺牲了”，依次类推，直到到达目的主机。这样，Traceroute 就拿到了所有的路由器 IP。<strong>当然，有的路由器压根不会回这个 ICMP。这也是 Traceroute一个公网的地址，看不到中间路由的原因。</strong></p><p>那又是怎么知道 UDP 有没有到达目的主机呢？Traceroute 程序会发送一份UDP 数据报给目的主机，<strong>但它会选择一个不可能的值作为 UDP 端口号（大于 30000 ）</strong>。当该数据报到达时，将使目的主机的 UDP 模块产生一份“端口不可达”错误 ICMP 报文。如果数据报没有到达，则可能是超时。</p></li><li><p>ICMP差错报告报文共有5种类型：</p><ul><li><strong>终点不可达</strong>。当路由器或者主机不能交付数据报时就像源点发送终点不可达报文。</li><li><strong>源点抑制</strong>。当路由器或者主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送率放慢</li><li><strong>时间超过</strong>。当路由器受到生存时间TTL为零的数据报时，除丢弃该数据报外，还要向源点发送时间超过报文。当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，并向源点发送时间超过报文。</li><li><strong>参数问题</strong>。当路由器或者目的主机收到的数据报的首部中的字段值不正确时，就丢弃该数据报，并向源点发送参数问题报文。</li><li><strong>重定向</strong>。路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器（可通过更好的路由）。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/14/hello-world/"/>
      <url>/2022/02/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
