<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Django基本操作（2）</title>
      <link href="/2022/09/06/Django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%882%EF%BC%89/"/>
      <url>/2022/09/06/Django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Django基本操作（2）"><a href="#Django基本操作（2）" class="headerlink" title="Django基本操作（2）"></a>Django基本操作（2）</h2><h6 id="无论是GET还是POST，统一都由视图函数接收请求，通过判断request-method区分具体的请求动作"><a href="#无论是GET还是POST，统一都由视图函数接收请求，通过判断request-method区分具体的请求动作" class="headerlink" title="无论是GET还是POST，统一都由视图函数接收请求，通过判断request.method区分具体的请求动作"></a>无论是GET还是POST，统一都由视图函数接收请求，通过判断request.method区分具体的请求动作</h6><p>例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">    处理GET请求时的业务逻辑</span><br><span class="line"><span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">    处理POST请求的业务逻辑</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    其他请求业务逻辑</span><br></pre></td></tr></table></figure><h3 id="一、GET处理"><a href="#一、GET处理" class="headerlink" title="一、GET处理"></a>一、GET处理</h3><h5 id="1-GET请求动作，一般用于向服务器获取数据（少量、非敏感）。能够产生GET请求的场景："><a href="#1-GET请求动作，一般用于向服务器获取数据（少量、非敏感）。能够产生GET请求的场景：" class="headerlink" title="1. GET请求动作，一般用于向服务器获取数据（少量、非敏感）。能够产生GET请求的场景："></a>1. GET请求动作，一般用于向服务器获取数据（少量、非敏感）。能够产生GET请求的场景：</h5><ul><li>浏览器地址栏中输入URL，回车后</li><li><code>&lt;a href=&quot;地址?参数=值&amp;参数=值&quot;&gt;</code></li><li>form表单中的method为get</li></ul><h5 id="2-方法示例"><a href="#2-方法示例" class="headerlink" title="2. 方法示例"></a>2. 方法示例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.GET[<span class="string">&#x27;参数名&#x27;</span>]  <span class="comment"># QueryDict</span></span><br><span class="line">request.GET.get(<span class="string">&#x27;参数名&#x27;</span>, <span class="string">&#x27;默认值&#x27;</span>)  <span class="comment"># 如果没有查询的值，则返回默认值，上面的方法则不能</span></span><br><span class="line">request.GET.getlist(<span class="string">&#x27;参数名&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;test_get_post&quot;</span>, views.test_get_post)</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># test_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_get_post</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(request.GET)</span><br><span class="line">        <span class="built_in">print</span>(request.GET[<span class="string">&#x27;a&#x27;</span>])  <span class="comment"># report error when there is no value of a</span></span><br><span class="line">        <span class="built_in">print</span>(request.GET.get(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;no c&#x27;</span>))  <span class="comment"># no error even there is no value of c</span></span><br><span class="line">        <span class="built_in">print</span>(request.GET.getlist(<span class="string">&#x27;a&#x27;</span>))  <span class="comment"># get multiple value</span></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;--test get post is ok--&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 终端显示</span></span><br><span class="line"></span><br><span class="line">&lt;QueryDict: &#123;<span class="string">&#x27;a&#x27;</span>: [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]&#125;&gt;  <span class="comment"># request.GET</span></span><br><span class="line">2<span class="comment"># request.GET(&#x27;a&#x27;)</span></span><br><span class="line">no c<span class="comment"># request.GET.get(&#x27;c&#x27;, &#x27;no c&#x27;)</span></span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]   <span class="comment"># request.GET.getlist(&#x27;a&#x27;)</span></span><br><span class="line">[06/Sep/2022 12:25:36] <span class="string">&quot;GET /test_get_post?a=1&amp;a=2 HTTP/1.1&quot;</span> 200 23</span><br></pre></td></tr></table></figure><h3 id="二、POST处理"><a href="#二、POST处理" class="headerlink" title="二、POST处理"></a>二、POST处理</h3><h5 id="1-POST请求动作，一般用于向服务器提交数据（大量、敏感）。"><a href="#1-POST请求动作，一般用于向服务器提交数据（大量、敏感）。" class="headerlink" title="1. POST请求动作，一般用于向服务器提交数据（大量、敏感）。"></a>1. POST请求动作，一般用于向服务器提交数据（大量、敏感）。</h5><ul><li><p>客户端通过表单等POST请求将数据传递给服务器端，如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;form method=<span class="string">&#x27;post&#x27;</span> action=<span class="string">&quot;/login&quot;</span>&gt;</span><br><span class="line">姓名:&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li><li><p>服务端接收参数：（取消setting.py中的CSRF验证 #MIDDLEWARE[]中，否则Django将会拒绝客户端发来的POST请求，报403响应）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.POST[<span class="string">&#x27;参数名&#x27;</span>]  <span class="comment"># QueryDict</span></span><br><span class="line">request.POST.get(<span class="string">&#x27;参数名&#x27;</span>, <span class="string">&#x27;默认值&#x27;</span>)  <span class="comment"># 如果没有查询的值，则返回默认值，上面的方法则不能</span></span><br><span class="line">request.POST.getlist(<span class="string">&#x27;参数名&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-方法示例-1"><a href="#2-方法示例-1" class="headerlink" title="2. 方法示例"></a>2. 方法示例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line">POST_FORM = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;form method=&#x27;post&#x27; action=&#x27;/test_get_post&#x27;</span></span><br><span class="line"><span class="string">    username: &lt;input type=&#x27;text&#x27; name=&#x27;uname&#x27;&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&#x27;submit&#x27; value=&#x27;submit&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;/from&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_get_post</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(request.GET)</span><br><span class="line">        <span class="built_in">print</span>(request.GET[<span class="string">&#x27;a&#x27;</span>])  <span class="comment"># report error when there is no value of a</span></span><br><span class="line">        <span class="built_in">print</span>(request.GET.get(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;no c&#x27;</span>))  <span class="comment"># no error even there is no value of c</span></span><br><span class="line">        <span class="built_in">print</span>(request.GET.getlist(<span class="string">&#x27;a&#x27;</span>))  <span class="comment"># get multiple value</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(POST_FORM)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>((<span class="string">&#x27;uname is&#x27;</span>, request.POST[<span class="string">&#x27;uname&#x27;</span>]))</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;post is ok&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;--test get post is ok--&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;test_get_post&quot;</span>, views.test_get_post)</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
            <tag> GET </tag>
            
            <tag> POST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 基本操作（1）</title>
      <link href="/2022/09/06/django-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%881%EF%BC%89/"/>
      <url>/2022/09/06/django-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Django基本操作-1"><a href="#Django基本操作-1" class="headerlink" title="Django基本操作(1)"></a>Django基本操作(1)</h2><h3 id="一、Django安装及配置"><a href="#一、Django安装及配置" class="headerlink" title="一、Django安装及配置"></a>一、Django安装及配置</h3><h5 id="1-配置虚拟环境"><a href="#1-配置虚拟环境" class="headerlink" title="1. 配置虚拟环境"></a>1. 配置虚拟环境</h5><ul><li><p>安装python-setuptools</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install python-setuptools</span><br></pre></td></tr></table></figure></li><li><p>安装virtualenv</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install virtualenv</span><br></pre></td></tr></table></figure></li><li><p>创建虚拟环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo virtualenv django</span><br></pre></td></tr></table></figure></li><li><p>激活虚拟环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ./django/bin/activate</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-安装django"><a href="#2-安装django" class="headerlink" title="2. 安装django"></a>2. 安装django</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install django  <span class="comment"># 也可指定版本号</span></span><br></pre></td></tr></table></figure><h3 id="二、项目结构"><a href="#二、项目结构" class="headerlink" title="二、项目结构"></a>二、项目结构</h3><h5 id="1-创建项目文件夹"><a href="#1-创建项目文件夹" class="headerlink" title="1. 创建项目文件夹"></a>1. 创建项目文件夹</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django-admin startproject mysite1  <span class="comment"># 创建mysite1项目文件夹</span></span><br></pre></td></tr></table></figure><h5 id="2-启动服务（测试开发阶段）"><a href="#2-启动服务（测试开发阶段）" class="headerlink" title="2. 启动服务（测试开发阶段）"></a>2. 启动服务（测试开发阶段）</h5><p>进入项目文件夹mysite1中，执行启动命令，然后浏览器访问127.0.0.1：8000即可看到小火箭</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> mysite1</span><br><span class="line">python3 manage.py runserver 8000  <span class="comment"># 不写端口号时默认为8000</span></span><br></pre></td></tr></table></figure><h5 id="3-关闭服务：执行Ctrl-c-或者杀进程ID"><a href="#3-关闭服务：执行Ctrl-c-或者杀进程ID" class="headerlink" title="3. 关闭服务：执行Ctrl + c 或者杀进程ID"></a>3. 关闭服务：执行Ctrl + c 或者杀进程ID</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:8000  <span class="comment"># 查看django进程ID(如果有多个，杀listen状态那的进程)</span></span><br><span class="line"><span class="built_in">kill</span> -9 ID  <span class="comment"># 杀死django进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果启动时报错 Error：The port is already in use 则杀掉那个进程，或者另换端口号</span></span><br></pre></td></tr></table></figure><h5 id="4-mysite1文件夹树状结构"><a href="#4-mysite1文件夹树状结构" class="headerlink" title="4. mysite1文件夹树状结构"></a>4. mysite1文件夹树状结构</h5><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Sep/202209021002284.png" alt="image-20220902100200235"></p><h5 id="5-manage-py包含项目管理的子命令，执行python3可列出所有的django子命令"><a href="#5-manage-py包含项目管理的子命令，执行python3可列出所有的django子命令" class="headerlink" title="5. manage.py包含项目管理的子命令，执行python3可列出所有的django子命令"></a>5. manage.py包含项目管理的子命令，执行python3可列出所有的django子命令</h5><h5 id="6-项目同名文件夹（同级目录）mysite1，包含如下文件："><a href="#6-项目同名文件夹（同级目录）mysite1，包含如下文件：" class="headerlink" title="6. 项目同名文件夹（同级目录）mysite1，包含如下文件："></a>6. 项目同名文件夹（同级目录）mysite1，包含如下文件：</h5><ul><li><code>_init_</code>: python包的初始化文件</li><li><code>wsgi.py</code>: WEB服务网关的配置文件-django正式启动时，需要用到</li><li><code>urls.py</code>: 项目的主路由配置-HTTP请求进入django时，优先调用该文件</li><li><code>settings.py</code>: 项目的配置文件-包含项目启动时需要的配置</li></ul><h3 id="三、路由配置"><a href="#三、路由配置" class="headerlink" title="三、路由配置"></a>三、路由配置</h3><p><strong>URL: <code>protocal ://hostname[:port]/path[?query][#fragment]</code></strong></p><h5 id="1-访问127-0-0-1-x2F-page-x2F-1"><a href="#1-访问127-0-0-1-x2F-page-x2F-1" class="headerlink" title="1. 访问127.0.0.1&#x2F;page&#x2F;1"></a>1. 访问127.0.0.1&#x2F;page&#x2F;1</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 127.0.0.1/page/1</span></span><br><span class="line">    path(<span class="string">&quot;page/1&quot;</span>, views.page1_view),  <span class="comment"># page/1或者page/1/都可</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page1_view</span>(<span class="params">request</span>):</span><br><span class="line">    html = <span class="string">&quot;&lt;h1&gt;It&#x27;s the first page!&lt;/h1&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><h5 id="2-path-函数："><a href="#2-path-函数：" class="headerlink" title="2. path()函数："></a>2. path()函数：</h5><ul><li><p>导入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br></pre></td></tr></table></figure></li><li><p>语法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(route, views, name=<span class="literal">None</span>) </span><br><span class="line"><span class="comment"># route: 字符串类型，匹配的请求路径</span></span><br><span class="line"><span class="comment"># views: 指定路径所对应的试图处理函数的名称</span></span><br><span class="line"><span class="comment"># name:  为地址起别名，在模板中地址反向解析时使用</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="3-path转换器"><a href="#3-path转换器" class="headerlink" title="3. path转换器"></a>3. path转换器</h5><ul><li><p>语法：<code>&lt;转换器类型:自定义名&gt;</code></p></li><li><p>作用：若转换器类型匹配到对应类型的数据，则将数据按照关键字传参的方式传递给视图函数</p></li><li><p>例子：<code>path(&#39;page/&lt;int:page&gt;&#39;, views.xxx)</code></p></li><li><p>做一个计算器：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal_view</span>(<span class="params">request, n, op, m</span>):</span><br><span class="line">    <span class="keyword">if</span> op <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;sub&#x27;</span>, <span class="string">&#x27;mul&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Your op is wrong&quot;</span>)</span><br><span class="line"></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">        result = n + m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;sub&#x27;</span>:</span><br><span class="line">        result = n - m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&#x27;mul&#x27;</span>:</span><br><span class="line">        result = n * m</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">&quot;The result is %s&quot;</span> % result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># calculator</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:n&gt;/&lt;str:op&gt;/&lt;int:m&gt;&quot;</span>, views.cal_view) </span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-re-path"><a href="#4-re-path" class="headerlink" title="4. re_path()"></a>4. re_path()</h5><ul><li><p>在url的匹配过程中可以使用正则表达式进行精确匹配</p></li><li><p>语法：</p><ul><li><p>re_path(reg, view, name&#x3D;xxx)</p></li><li><p>正则表达式为命名分组模式<code>(?&lt;name&gt;pattern)</code>；匹配提取参数后用关键字传参方式给视图函数</p></li><li><p>用正则表达式做一个计算器，只能计算两位数与两位数的运算：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># calculator2</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^(?P&lt;x&gt;\d&#123;1,2&#125;)/(?P&lt;op&gt;\w+)/(?P&lt;y&gt;\d&#123;1,2&#125;)$&#x27;</span>, views.cal2_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal2_view</span>(<span class="params">request, x, op, y</span>):</span><br><span class="line">    html = <span class="string">&quot;x:%s op:%s y:%s&quot;</span> % (x, op, y)  <span class="comment"># 省略了计算过程</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure></li><li><p>用正则表达式做一个生日显示：127.0.0.1:8000&#x2F;2003&#x2F;02&#x2F;03或者127.0.0.1:8000&#x2F;02&#x2F;03&#x2F;2003</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">birthday_view</span>(<span class="params">request, y, m, d</span>):</span><br><span class="line">    html = <span class="string">&quot;the birthday is %s/%s/%s&quot;</span> % (y, m, d)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    re_path(<span class="string">r&#x27;^birthday/(?P&lt;y&gt;\d&#123;4&#125;)/(?P&lt;m&gt;\d&#123;1,2&#125;)/(?P&lt;d&gt;\d&#123;1,2&#125;)$&#x27;</span>, views.birthday_view),</span><br><span class="line">    re_path(<span class="string">r&#x27;^birthday/(?P&lt;m&gt;\d&#123;1,2&#125;)/(?P&lt;d&gt;\d&#123;1,2&#125;)/(?P&lt;y&gt;\d&#123;4&#125;)$&#x27;</span>, views.birthday_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习随笔（2）</title>
      <link href="/2022/08/02/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%882%EF%BC%89/"/>
      <url>/2022/08/02/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前端学习随笔（2）"><a href="#前端学习随笔（2）" class="headerlink" title="前端学习随笔（2）"></a>前端学习随笔（2）</h3><h4 id="一、CSS简介"><a href="#一、CSS简介" class="headerlink" title="一、CSS简介"></a>一、CSS简介</h4><h5 id="1-1-CSS-网页美容师"><a href="#1-1-CSS-网页美容师" class="headerlink" title="1.1 CSS-网页美容师"></a>1.1 CSS-网页美容师</h5><p>CSS是<strong>层叠样式表</strong>（Cascading Style sheets）的简称。有时也称<strong>CSS样式表</strong>或者<strong>级联样式表</strong>，也是一种标记语言。</p><p>CSS最大价值：让HTML专注去做结构呈现，样式交给CSS，即<strong>结构（HTML）与样式（CSS）相分离</strong>。</p><h5 id="1-2-CSS语法规范"><a href="#1-2-CSS语法规范" class="headerlink" title="1.2 CSS语法规范"></a>1.2 CSS语法规范</h5><p>选择器{一条或者多条声明}</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208021505545.png" alt="image-20220802150550470"></p><h5 id="1-3-CSS代码风格"><a href="#1-3-CSS代码风格" class="headerlink" title="1.3 CSS代码风格"></a>1.3 CSS代码风格</h5><ol><li>使用展开格式，直观清晰</li><li>选择器，属性名，属性值关键字等全部使用小写字母，特殊情况除外</li><li>选择器和大括号中间保留空格；冒号后面，属性值前面，保留一个空格</li></ol><h4 id="二、CSS基础选择器"><a href="#二、CSS基础选择器" class="headerlink" title="二、CSS基础选择器"></a>二、CSS基础选择器</h4><p>选择器分类：基础选择器和复合选择器</p><p>基础选择器是由单个选择器组成的，主要包括标签选择器、类选择器、id选择器和通配符选择器</p><h5 id="2-1-标签选择器"><a href="#2-1-标签选择器" class="headerlink" title="2.1 标签选择器"></a>2.1 标签选择器</h5><p>用HTML标签名称作为选择器，按标签名称分类，为页面中的某一类标签指定样式</p><p>局限性：不能设计差异化样式，只能选择全部的当前样式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-2-类选择器"><a href="#2-2-类选择器" class="headerlink" title="2.2 类选择器"></a>2.2 类选择器</h5><p>记忆口诀：样式点定义，结构类调用，一个或多个，开发最常用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多类名：(提高代码复用性，布局清晰)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.font35</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red font35&quot;</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-id选择器"><a href="#2-3-id选择器" class="headerlink" title="2.3 id选择器"></a>2.3 id选择器</h5><p>创建和调用与类选择器几乎是一样的，#创建，id调用</p><p>区别是id调用最好具有唯一性，即最好留给后面js的人用，避免调用元素时出现冲突</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-4-通配符选择器"><a href="#2-4-通配符选择器" class="headerlink" title="2.4 通配符选择器"></a>2.4 通配符选择器</h5><p>选择页面中的所有元素（标签）</p><p>不需要调用，自动给所有元素添加样式</p><p>在特殊情况下才使用，如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-基础选择器总结"><a href="#2-5-基础选择器总结" class="headerlink" title="2.5 基础选择器总结"></a>2.5 基础选择器总结</h5><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208021610196.png" alt="image-20220802161022115"></p><h4 id="三、CSS字体属性"><a href="#三、CSS字体属性" class="headerlink" title="三、CSS字体属性"></a>三、CSS字体属性</h4><h5 id="3-1-字体系列"><a href="#3-1-字体系列" class="headerlink" title="3.1 字体系列"></a>3.1 字体系列</h5><p>使用<code>font-family</code>定义字体系列</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">p &#123; font-family: &quot;微软雅黑&quot;&#125;</span><br><span class="line">div &#123; font-family: Arial, &quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li><p>各个字体之间使用英文逗号隔开（因为有些字体系列不止一个单词）</p></li><li><p>如果有多个单词组成的字体系列，加引号</p></li><li><p>尽量使用默认字体，保证所有用户的浏览器都可正常访问</p></li><li><p>最常见的几个字体：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">body &#123; font-family: &quot;Microsoft Yahei&quot;, tahoma, arial, &quot;Hiragino Sans GB&quot;&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="3-2-字体属性"><a href="#3-2-字体属性" class="headerlink" title="3.2 字体属性"></a>3.2 字体属性</h5><p>字体大小：<code>font-size</code>(给body指定文字时，标题不受限制，需要单独制定；谷歌浏览器默认字体大小为16px)</p><p>字体粗细：<code>font-weight</code>（normal&#x3D;400, bold&#x3D;700; 尽可能使用数字而不用单词，数字从100到900）</p><p>字体样式：<code>font-style</code>（normal 不倾斜，italic 倾斜；实际开发中使倾斜文字恢复成不倾斜文字，如em、i)</p><p>字体复合属性：<code>font</code>（节约代码）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* font-style: italic;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        font-weight: 700;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        font-size: 16px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        font-family: &quot;Microsoft Yahei&quot;; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 复合属性 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">30px</span> <span class="string">&quot;Microsoft Yahei&quot;</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>巴拉巴拉巴拉巴拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>复合属性注意事项：</strong></p><ol><li><p>属性顺序不能改变，严格按照<code>font-style font-weight font-size/line-height font-family</code>的顺序，属性之间用空格隔开</p></li><li><p>不需要设置的属性可以省略（默认值），但是<code>font-size</code>和<code>font-family</code>必须保留，否则<code>font</code>将不起作用</p></li></ol><h4 id="四、文本属性"><a href="#四、文本属性" class="headerlink" title="四、文本属性"></a>四、文本属性</h4><h5 id="4-1-文本颜色"><a href="#4-1-文本颜色" class="headerlink" title="4.1 文本颜色"></a>4.1 文本颜色</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三种颜色表示方式：</p><ol><li>预定义颜色值：red、green、blue等</li><li>十六进制：#FF0000、#FF6600、#29D794等  (最常用)</li><li>RGB代码：rgb(255,0,0)或者rgb(100%,0%,0%)</li></ol><h5 id="4-2-文本对齐"><a href="#4-2-文本对齐" class="headerlink" title="4.2 文本对齐"></a>4.2 文本对齐</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">text-align: center;  # 总共有center、left、right三个属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-文本装饰"><a href="#4-3-文本装饰" class="headerlink" title="4.3 文本装饰"></a>4.3 文本装饰</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">text-decoration: underline: </span><br><span class="line"># none(默认，最常用，常用于删除超链接下划线)、underline（常用）、overline（几乎不用）、line-through 不常用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-文本缩进"><a href="#4-4-文本缩进" class="headerlink" title="4.4 文本缩进"></a>4.4 文本缩进</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">text-indent: 10px;  # 将段落的首行缩进10px</span><br><span class="line">text-indent: 2em;   # em是一个相对单位，即当前元素（font-size)1个文字的大小，如果当前元素没设置大小，则按照父元素设置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-5-行间距"><a href="#4-5-行间距" class="headerlink" title="4.5 行间距"></a>4.5 行间距</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">line-height: 26px;  # 行高=上间距+文本高度+下间距，其中文本高度是设定好的，上下间距是相等的，设置行高就是调整上下间距</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五、CSS引入方式"><a href="#五、CSS引入方式" class="headerlink" title="五、CSS引入方式"></a>五、CSS引入方式</h4><h5 id="5-1-CSS的三种样式表"><a href="#5-1-CSS的三种样式表" class="headerlink" title="5.1 CSS的三种样式表"></a>5.1 CSS的三种样式表</h5><ol><li>行内样式表（行内式）</li><li>内部样式表（嵌入式）</li><li>外部样式表（链接式）</li></ol><h5 id="5-2-行内样式表"><a href="#5-2-行内样式表" class="headerlink" title="5.2 行内样式表"></a>5.2 行内样式表</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span></span><br><span class="line">    巴拉巴拉  # 临时使用、少量使用、不推荐大量使用</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-3-内部样式表"><a href="#5-3-内部样式表" class="headerlink" title="5.3 内部样式表"></a>5.3 内部样式表</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li><code>&lt;style&gt;</code>标签理论上可以放在HTML文档的任何位置，但习惯上放在<code>&lt;head&gt;</code>标签中</li><li>代码结构清晰，但并没有实现结构与样式的完全分离</li><li>常用与练习中或测试</li></ol><h5 id="5-4-外部样式表"><a href="#5-4-外部样式表" class="headerlink" title="5.4 外部样式表"></a>5.4 外部样式表</h5><p><strong>实际开发都是外部样式表，适合于样式比较多的情况。可以控制多个页面</strong></p><p>引入外部样式表分两步：</p><ol><li>新建一个后缀名为.css的样式文件，把所有CSS代码都放到此文件中</li><li>在HTNL页面中，使用<code>&lt;link&gt;</code>标签引入这个文件</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css文件路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习随笔（1）</title>
      <link href="/2022/08/01/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94(1)/"/>
      <url>/2022/08/01/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94(1)/</url>
      
        <content type="html"><![CDATA[<h3 id="前端学习随笔（1）"><a href="#前端学习随笔（1）" class="headerlink" title="前端学习随笔（1）"></a>前端学习随笔（1）</h3><h4 id="一、前端三大标准：结构-HTML-、表现-CSS-、行为-JS"><a href="#一、前端三大标准：结构-HTML-、表现-CSS-、行为-JS" class="headerlink" title="一、前端三大标准：结构(HTML)、表现(CSS)、行为(JS)"></a>一、前端三大标准：结构(HTML)、表现(CSS)、行为(JS)</h4><h4 id="二、基本结构标签："><a href="#二、基本结构标签：" class="headerlink" title="二、基本结构标签："></a>二、基本结构标签：</h4><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011211834.png" alt="image-20220801121149751"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011213639.png" alt="image-20220801121303590"></p><h4 id="三、常用快捷键（VScode）："><a href="#三、常用快捷键（VScode）：" class="headerlink" title="三、常用快捷键（VScode）："></a>三、常用快捷键（VScode）：</h4><ol><li><code>！+ enter/Tab</code>           生成html骨架标签</li><li><code>ctrl + ‘+’   </code>                放大代码（减号缩小代码）</li><li><code>ctrl + N </code>                   新建文件</li><li><code>ctrl + v     </code>                 直接换行粘贴</li></ol><h4 id="四、路径："><a href="#四、路径：" class="headerlink" title="四、路径："></a>四、路径：</h4><ul><li><p>相对路径：</p><ul><li>.代表当前目录，..代表上一级目录，&#x2F;代表下一级目录</li><li><strong>windows里面相对路径使用正斜杠，绝对路径使用反斜杠，网络中的绝对路径使用正斜杠</strong></li></ul></li><li><p>绝对路径：</p><ul><li>本地电脑：<code> &quot;D:\\web\img\logo.gif&quot;</code></li><li>网络地址：<code> &quot;http://www.itcast.cn/images/logo.gif&quot;</code></li></ul></li></ul><h4 id="五、HTML常用标签："><a href="#五、HTML常用标签：" class="headerlink" title="五、HTML常用标签：! ! !"></a>五、HTML常用标签：! ! !</h4><ol><li><p>标题标签：<code>&lt;h1&gt; - &lt;h6&gt;</code></p></li><li><p>段落标签： <code>&lt;p&gt;&lt;/p&gt;</code></p></li><li><p>换行标签：  <code>&lt;br /&gt;</code></p></li><li><p>文本格式化标签：</p><ul><li>加粗：<code>&lt;strong&gt;&lt;/strong&gt;</code>  或者 <code>&lt;b&gt;&lt;/b&gt;</code></li><li>倾斜：<code>&lt;em&gt;&lt;/em&gt;</code>  或者 <code>&lt;i&gt;&lt;/i&gt;</code></li><li>删除线：<code>&lt;del&gt;&lt;/del&gt;</code> 或者<code> &lt;s&gt;&lt;/s&gt;</code></li><li>下划线：<code>&lt;ins&gt;&lt;/ins&gt;</code> 或者 <code>&lt;u&gt;&lt;/u&gt;</code></li></ul></li><li><p>盒子标签：</p><ul><li>大盒子： <code>&lt;div&gt;&lt;/div&gt;</code>  （division）独占一行</li><li>小盒子： <code>&lt;span&gt;&lt;/span&gt;</code>   一行多个</li></ul></li><li><p>图像标签：</p><ul><li><code>&lt;img src=&quot;图像URL&quot; /&gt;</code>  src是<code>&lt;img&gt;</code>的必须属性</li><li><code>&lt;img src=&quot;图像URL&quot; alt=&quot;这个图象是这样的&quot; /&gt;</code>  alt用于在图像无法正常显示时提示图像的相应信息（替换文本）</li><li><code>&lt;img src=&quot;图像URL&quot; title=&quot;名字&quot; /&gt;</code> title用于鼠标放在图像上时显示图像名称（提示文本）</li><li>还有其他属性：width 、height 、border等，一般在CSS中设置，此处不适用</li></ul></li><li><p>超链接标签：</p><ul><li><p><code> &lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt; 文本或图像 &lt;/a&gt;</code>   (a是<code> anchor</code>的首字母)</p></li><li><p>href是必须属性，target用于指定链接页面的打开方式，_self为默认值，_blank为在新窗口打开</p></li><li><p>链接分类：</p><p>​    外部链接：<code>&lt;a href=&quot;http://www.baidu.com&quot;&gt; 百度 &lt;/a&gt;</code></p><p>​    内部链接：<code>&lt;a href=&quot;index.html&quot;&gt; 首页 &lt;/a&gt;</code></p><p>​    空链接：    <code>&lt;a href=&quot;#&quot;&gt; 首页 &lt;/a&gt;</code></p><p>​    下载链接：<code>&lt;a href=&quot;a.zip&quot;&gt; 下载 &lt;/a&gt;</code></p><p>​    网页元素链接：<code>&lt;a href=&quot;www.baidu.com&quot;&gt; &lt;img src=&quot;img.jpg&quot;&gt; &lt;/a&gt; </code></p><p>​    锚点链接： 点击链接，可快速定位到页面中的某个位置</p><p>​        首先在链接文本中的href属性中，设置属性值为#名字的形式，如<code>&lt;a href=&quot;#two&quot;&gt; 第二集 &lt;/a&gt;</code></p><p>​        找到目标位置，里面添加一个id属性&#x3D;刚才的名字，如<code>&lt;h3 id=&quot;two&quot;&gt; 第二集介绍 &lt;/h3&gt;</code></p></li></ul></li><li><p>注释标签：<code>&lt;!-- 注释语句 --&gt;</code> 一般使用快捷键<code>ctrl + /</code></p></li><li><p>特殊字符：</p><ul><li><p>空格符：<code>&amp;nbsp</code></p></li><li><p>小于号：<code>&amp;lt</code></p></li><li><p>大于号：<code>&amp;gt</code></p></li><li><p>其他：现用现查</p></li></ul></li><li><p>表格标签：</p><ul><li><p>包含表格、行、单元格三个元素</p></li><li><p>表格：<code>&lt;table&gt;&lt;/table&gt;</code>、行：<code>&lt;tr&gt;&lt;/tr&gt;</code>、单元格：<code>&lt;td&gt;&lt;/td&gt;</code></p></li><li><p>表头单元格：<code>&lt;th&gt;&lt;/th&gt;</code> （表头单元格里面的内容加粗居中显示）</p></li><li><p>表格结构标签：</p><p>​    表格头部：<code>&lt;thead&gt;&lt;/thead&gt;</code></p><p>​    表格主题：<code>&lt;tbody&gt;&lt;/tbody&gt;</code></p></li><li><p>表格结构：table –&gt; thead、tbody –&gt; th、tr –&gt; td</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011449852.png" alt="image-20220801144934800"></p></li><li><p>合并单元格：</p><p>​    跨行合并：<code>rowspan=&quot;合并单元格的个数&quot;</code></p><p>​    跨列合并：<code>colspan=&quot;合并单元格的个数&quot;</code></p></li><li><p>目标单元格：</p><p>​    跨行：最上侧单元格为目标单元格，写合并代码</p><p>​    跨列：最左侧单元格为目标单元格，写合并代码</p></li><li><p>合并三部曲：<br>1. 确定跨行还是跨列<br> 2. 找到目标单元格，写上合并方式&#x3D;合并的单元格数量，比如：<code>&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</code><br> 3. 删除多余的单元格</p></li></ul></li><li><p>列表标签：</p><ul><li><p>特点：整齐、整洁、有序，作为布局更加自由和方便</p></li><li><p>分类：无序列表、有序列表、自定义列表</p></li><li><p>无序列表（！！！用的非常非常非常多）：</p><p>​    <img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011511793.png" alt="image-20220801151125727"></p></li><li><p>有序列表：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011514867.png" alt="image-20220801151426805"></p></li><li><p>自定义列表（！！！）：</p><p>使用场景：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011516802.png" alt="image-20220801151659732"></p><p>基本语法：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011519706.png" alt="image-20220801151938653"></p></li></ul></li><li><p>表单标签：</p><ul><li><p>组成：表单域、表单控件（表单元素）、提示信息</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011523133.png" alt="image-20220801152328066"></p></li><li><p>表单域：<code>&lt;form&gt;&lt;/form&gt;</code></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208011527765.png" alt="image-20220801152718686"></p></li><li><p>表单元素：input、select、textarea</p></li><li><p>input输入表单元素：<code>&lt;input type=&quot;属性值&quot; /&gt;</code> <strong>单标签</strong>，type为必须属性，不同属性指定不同的控件类型，常见的有：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012024255.png" alt="image-20220801202441172"></p><p>除了type属性外，<code>&lt;input&gt;</code>还有很多其他属性，常用属性如下：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012031170.png" alt="image-20220801203144077"></p><p>​    <img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012040691.png" alt="image-20220801204055623"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012041871.png" alt="image-20220801204139798"></p></li><li><p>select下拉表单元素：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012108036.png" alt="image-20220801210810985"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012109066.png" alt="image-20220801210900008"></p></li><li><p>textarea文本域元素：</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img/Aug/202208012112722.png" alt="image-20220801211255671"></p></li></ul></li></ol><h4 id="更多标签，通过查询学习："><a href="#更多标签，通过查询学习：" class="headerlink" title="更多标签，通过查询学习："></a><strong>更多标签，通过查询学习</strong>：</h4><p>W3C: <a href="http://www.w3school.com.cn/">http://www.w3school.com.cn</a></p><p>MDN: <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Burpsuite抓取手机流量</title>
      <link href="/2022/07/31/%E4%BD%BF%E7%94%A8Burpsuite%E6%8A%93%E5%8F%96%E6%89%8B%E6%9C%BA%E6%B5%81%E9%87%8F/"/>
      <url>/2022/07/31/%E4%BD%BF%E7%94%A8Burpsuite%E6%8A%93%E5%8F%96%E6%89%8B%E6%9C%BA%E6%B5%81%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="使用burpsuite抓取手机流量"><a href="#使用burpsuite抓取手机流量" class="headerlink" title="使用burpsuite抓取手机流量"></a>使用burpsuite抓取手机流量</h4><ol><li><p><strong>查看电脑ip，并在burpsuite中将代理设置成本机ip</strong></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311428718.png" alt="img"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311428713.png" alt="img"></p></li><li><p><strong>从burpsuite中导出证书，后面导入到手机中安装</strong></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311430250.png" alt="img"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311430288.png" alt="img"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311430722.png" alt="img"></p></li><li><p><strong>手机端设置代理（不同手机设置路径不同，下面以华为手机为例）</strong></p><p>长按连接的wifi，点击修改网络，将代理设置为手动，修改服务器主机名和端口号为burpsuite中设置的代理ip和端口号，保存即可</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311436731.png" alt="image-20220731143632586"></p></li><li><p><strong>手机端导入ca证书（以华为手机为例）</strong></p><p>简单的方法就是将电脑端证书传到手机中，微信qq均可，然后点击保存，使用证书安装器打开，验证身份（指纹密码等），输入证书名称和凭据用途，保存即可（此方式最快，还有比较常规的方法，自行百度）</p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311440554.png" alt="image-20220731144032426"></p></li><li><p><strong>最最最重要的一步！！！windows关闭防火墙，否则可能无法抓到包！！！</strong></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311442805.png" alt="image-20220731144241759"></p></li><li><p><strong>之后便可愉快地抓包了</strong></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311448119.png" alt="image-20220731144806992"></p><p><img src="https://jzealoimg.oss-cn-hangzhou.aliyuncs.com/Blog/img202207311448514.png" alt="image-20220731144831478"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻击操作汇总</title>
      <link href="/2022/07/23/%E6%94%BB%E5%87%BB%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
      <url>/2022/07/23/%E6%94%BB%E5%87%BB%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="攻击操作汇总（1）"><a href="#攻击操作汇总（1）" class="headerlink" title="攻击操作汇总（1）"></a>攻击操作汇总（1）</h3><h4 id="一、使用hping3进行泛洪攻击"><a href="#一、使用hping3进行泛洪攻击" class="headerlink" title="一、使用hping3进行泛洪攻击"></a>一、使用hping3进行泛洪攻击</h4><p><strong>简介：</strong>hping是面向命令行的用于生成和解析TCP&#x2F;IP协议数据包汇编&#x2F;分析的开源工具。作者是Salvatore Sanfilippo，界面灵感来自ping（8）unix命令，目前最新版是hping3，它支持TCP，UDP，ICMP和RAW-IP协议，具有跟踪路由模式，能够在覆盖的信道之间发送文件以及许多其他功能，支持使用tcl脚本自动化地调用其API。hping是安全审计、防火墙测试等工作的标配工具。hping优势在于能够定制数据包的各个部分，因此用户可以灵活对目标机进行细致地探测</p><ol><li><p><strong>ICMP攻击</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hping3 --icmp --rand-source --flood 192.168.43.175</span><br></pre></td></tr></table></figure></li><li><p><strong>UDP攻击</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hping3 -a 8.8.8.8 --udp -p 444 --flood 192.168.43.175</span><br></pre></td></tr></table></figure></li><li><p><strong>SYN攻击</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hping3 -a 8.8.8.8 -S -p 888 --flood 192.168.43.175  <span class="comment"># -S 采用SYN攻击</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ACK攻击</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hping3 -a 8.8.8.8 -A -p 888 --flood 192.168.43.175</span><br></pre></td></tr></table></figure></li></ol><h4 id="二、使用Hydra进行弱口令爆破"><a href="#二、使用Hydra进行弱口令爆破" class="headerlink" title="二、使用Hydra进行弱口令爆破"></a>二、使用Hydra进行弱口令爆破</h4><p><strong>简介：</strong>Hydra是一款非常强大的暴力破解工具，它是由著名的黑客组织THC开发的一款开源暴力破解工具。Hydra是一个验证性质的工具，主要目的是：展示安全研究人员从远程获取一个系统认证权限。</p><ol><li><p><strong>telnet口令爆破</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -L user.txt -P passwd.txt 192.168.43.175 telnet  <span class="comment"># -L 加载账号字典 -P 加载密码字典 telnet 指定爆破协议（端口）</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ssh口令爆破</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hydra -l admin -P passwd.txt 192.168.43.175 ssh  <span class="comment"># -l 指定用户名 -P 加载密码字典 ssh 指定爆破协议 （端口）</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="三、使用Ettercap进行中间人攻击"><a href="#三、使用Ettercap进行中间人攻击" class="headerlink" title="三、使用Ettercap进行中间人攻击"></a>三、使用Ettercap进行中间人攻击</h4><ol><li><p><strong>ARP欺骗</strong></p><p>攻击：打开图形化Ettercap，嗅探主机，将攻击对象地址添加target1，将伪装地址添加target2，实施ARP欺骗（ARP poisoning）</p><p>防御：</p><ul><li><p>安全软件及防火墙</p></li><li><p>电脑和网关路由器进行ARP双向绑定</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arp -s 192.168.1.1 00-11-22-a1-c6-09</span><br></pre></td></tr></table></figure></li><li><p>网络设备（交换机或者路由器）开启动态ARP检测技术（对arp地址变更者进行判定及惩罚）。</p></li></ul></li><li><p><strong>DNS欺骗</strong></p><p>攻击：先实施ARP欺骗，如1步骤所示，然后编辑ettercap配置文件（&#x2F;etc&#x2F;ettercap&#x2F;etter.dns)，添加如下内容，最后点击插件中的dns_spoof。如果kali机开启apache2服务，则所有主机上网均会指向apache2的页面。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* A 192.168.71.11  <span class="comment"># *代表诱导所有IP指向虚假A记录，后面的IP即是虚假DNS服务器IP（中间人）</span></span><br></pre></td></tr></table></figure><p><strong>避坑：</strong></p><ul><li>做实验时尽可能先清空dns缓存及浏览器上的数据缓存，以免影响实验。（无法上网时也可使用此方法排错）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><ul><li>win10如果手动设置DNS，需要将网关也添加到DNS中，再加一个DNS服务器（还不清楚为什么），否则无法上网。</li></ul></li></ol><h4 id="四、使用yersinia进行DHCP泛洪攻击"><a href="#四、使用yersinia进行DHCP泛洪攻击" class="headerlink" title="四、使用yersinia进行DHCP泛洪攻击"></a>四、使用yersinia进行DHCP泛洪攻击</h4><p><strong>discover泛洪攻击：</strong></p><p>攻击者：kali；   受害者：windows10（使用DHCP）获取地址</p><p>运行kali里面的yersinia工具，发起discover泛洪攻击，耗尽ip地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yersinia -G  <span class="comment"># G代表图形化</span></span><br></pre></td></tr></table></figure><p>此时win10若释放ip，将无法再获取到ip</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipconfig /release</span><br><span class="line">ipconfig /renew</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICMP基础知识</title>
      <link href="/2022/07/21/ICMP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/07/21/ICMP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>参考知乎文章：<a href="https://zhuanlan.zhihu.com/p/254762952">网络排查利器Ping与Traceroute（Tianny）</a></p><h3 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h3><ol><li><p><strong>ICMP</strong> 全称 <strong>Internet Control Message Protocol</strong>，就是<strong>网际控制报文协议</strong>。ICMP 报文是封装在 IP 包里面的，因为传输指令的时候，肯定需要源地址和目标地址。</p></li><li><p>ICMP报文有很多的类型，<strong>主要分为两类，查询报文类型和差错报告报文类型</strong>。</p></li><li><p>查询报文类型简单来说就是查询方主动发送侦查协议，等待对方的应答。具体例子，见下面 ping 的使用；</p><p>差错报文类型会使用 ICMP 的规则，<strong>故意制造一些能够产生错误的场景</strong>，从而达到网络诊断的目的。具体例子，见下面 traceroute 的使用。</p></li><li><p><strong>ping</strong> 这个程序是使用了 ICMP 里面的 ECHO REQUEST（8） 和 ECHO REPLY （0）类型的。经常会遇到一个问题，如果不在我们的控制范围内，很多中间设备都是禁止 ping 的，<strong>但是 ping 不通不代表网络不通</strong>。这个时候就要使用 telnet，通过其他协议来测试网络是否通。</p></li><li><p>差错报文类型会使用 ICMP 规则故意制造一些能够产生错误的场景。<strong>Traceroute</strong> 故意设置特殊的 TTL，来追踪去往目的地时沿途经过的路由器。<strong>Traceroute 的参数指向某个目的IP地址，它会发送一个 UDP 的数据包</strong>。将 TTL 设置成1，也就是说一旦遇到一个路由器或者一个关卡，就表示它“牺牲”了，于是，返回一个ICMP包，也就是网络差错包，类型是时间超时。接下来将将 TTL 设置为 2，第一关过了第二关又“牺牲了”，依次类推，直到到达目的主机。这样，Traceroute 就拿到了所有的路由器 IP。<strong>当然，有的路由器压根不会回这个 ICMP。这也是 Traceroute一个公网的地址，看不到中间路由的原因。</strong></p><p>那又是怎么知道 UDP 有没有到达目的主机呢？Traceroute 程序会发送一份UDP 数据报给目的主机，<strong>但它会选择一个不可能的值作为 UDP 端口号（大于 30000 ）</strong>。当该数据报到达时，将使目的主机的 UDP 模块产生一份“端口不可达”错误 ICMP 报文。如果数据报没有到达，则可能是超时。</p></li><li><p>ICMP差错报告报文共有5种类型：</p><ul><li><strong>终点不可达</strong>。当路由器或者主机不能交付数据报时就像源点发送终点不可达报文。</li><li><strong>源点抑制</strong>。当路由器或者主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送率放慢</li><li><strong>时间超过</strong>。当路由器受到生存时间TTL为零的数据报时，除丢弃该数据报外，还要向源点发送时间超过报文。当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，并向源点发送时间超过报文。</li><li><strong>参数问题</strong>。当路由器或者目的主机收到的数据报的首部中的字段值不正确时，就丢弃该数据报，并向源点发送参数问题报文。</li><li><strong>重定向</strong>。路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器（可通过更好的路由）。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/14/hello-world/"/>
      <url>/2022/02/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
